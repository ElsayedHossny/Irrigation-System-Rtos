
Rtos_scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000016fc  00001790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006f  0080009c  0080009c  000017cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031d5  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f07  00000000  00000000  00004d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000198a  00000000  00000000  00005c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008fc  00000000  00000000  000075e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001000  00000000  00000000  00007edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020ab  00000000  00000000  00008edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000af87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_1>
       8:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_2>
       c:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_6>
      1c:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_7>
      20:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_8>
      24:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 66 06 	jmp	0xccc	; 0xccc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 03 	call	0x7be	; 0x7be <main>
      8a:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_WriteCommand>:


void LCD_WriteChar(u8 ch)
{
	
	LCD_WriteData(ch);
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
      96:	60 e0       	ldi	r22, 0x00	; 0
      98:	80 e1       	ldi	r24, 0x10	; 16
      9a:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
      9e:	60 e0       	ldi	r22, 0x00	; 0
      a0:	81 e1       	ldi	r24, 0x11	; 17
      a2:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
      a6:	c4 fb       	bst	r28, 4
      a8:	66 27       	eor	r22, r22
      aa:	60 f9       	bld	r22, 0
      ac:	8c e1       	ldi	r24, 0x1C	; 28
      ae:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
      b2:	c5 fb       	bst	r28, 5
      b4:	66 27       	eor	r22, r22
      b6:	60 f9       	bld	r22, 0
      b8:	8d e1       	ldi	r24, 0x1D	; 29
      ba:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
      be:	c6 fb       	bst	r28, 6
      c0:	66 27       	eor	r22, r22
      c2:	60 f9       	bld	r22, 0
      c4:	87 e1       	ldi	r24, 0x17	; 23
      c6:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
      ca:	6c 2f       	mov	r22, r28
      cc:	66 1f       	adc	r22, r22
      ce:	66 27       	eor	r22, r22
      d0:	66 1f       	adc	r22, r22
      d2:	8f e1       	ldi	r24, 0x1F	; 31
      d4:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
      d8:	61 e0       	ldi	r22, 0x01	; 1
      da:	82 e1       	ldi	r24, 0x12	; 18
      dc:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
      e0:	8f e9       	ldi	r24, 0x9F	; 159
      e2:	9f e0       	ldi	r25, 0x0F	; 15
      e4:	01 97       	sbiw	r24, 0x01	; 1
      e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_WriteCommand+0x52>
      e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_WriteCommand+0x58>
      ea:	00 00       	nop
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	82 e1       	ldi	r24, 0x12	; 18
      f0:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
      f4:	8f e9       	ldi	r24, 0x9F	; 159
      f6:	9f e0       	ldi	r25, 0x0F	; 15
      f8:	01 97       	sbiw	r24, 0x01	; 1
      fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_WriteCommand+0x66>
      fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_WriteCommand+0x6c>
      fe:	00 00       	nop
     100:	6c 2f       	mov	r22, r28
     102:	61 70       	andi	r22, 0x01	; 1
     104:	8c e1       	ldi	r24, 0x1C	; 28
     106:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     10a:	c1 fb       	bst	r28, 1
     10c:	66 27       	eor	r22, r22
     10e:	60 f9       	bld	r22, 0
     110:	8d e1       	ldi	r24, 0x1D	; 29
     112:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     116:	c2 fb       	bst	r28, 2
     118:	66 27       	eor	r22, r22
     11a:	60 f9       	bld	r22, 0
     11c:	87 e1       	ldi	r24, 0x17	; 23
     11e:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     122:	c3 fb       	bst	r28, 3
     124:	66 27       	eor	r22, r22
     126:	60 f9       	bld	r22, 0
     128:	8f e1       	ldi	r24, 0x1F	; 31
     12a:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     12e:	61 e0       	ldi	r22, 0x01	; 1
     130:	82 e1       	ldi	r24, 0x12	; 18
     132:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     136:	8f e9       	ldi	r24, 0x9F	; 159
     138:	9f e0       	ldi	r25, 0x0F	; 15
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_WriteCommand+0xa8>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_WriteCommand+0xae>
     140:	00 00       	nop
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	82 e1       	ldi	r24, 0x12	; 18
     146:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     14a:	8f e9       	ldi	r24, 0x9F	; 159
     14c:	9f e0       	ldi	r25, 0x0F	; 15
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <LCD_WriteCommand+0xbc>
     152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_WriteCommand+0xc2>
     154:	00 00       	nop
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <LCD_WriteData>:
     15a:	cf 93       	push	r28
     15c:	c8 2f       	mov	r28, r24
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	80 e1       	ldi	r24, 0x10	; 16
     162:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	81 e1       	ldi	r24, 0x11	; 17
     16a:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     16e:	c4 fb       	bst	r28, 4
     170:	66 27       	eor	r22, r22
     172:	60 f9       	bld	r22, 0
     174:	8c e1       	ldi	r24, 0x1C	; 28
     176:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     17a:	c5 fb       	bst	r28, 5
     17c:	66 27       	eor	r22, r22
     17e:	60 f9       	bld	r22, 0
     180:	8d e1       	ldi	r24, 0x1D	; 29
     182:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     186:	c6 fb       	bst	r28, 6
     188:	66 27       	eor	r22, r22
     18a:	60 f9       	bld	r22, 0
     18c:	87 e1       	ldi	r24, 0x17	; 23
     18e:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     192:	6c 2f       	mov	r22, r28
     194:	66 1f       	adc	r22, r22
     196:	66 27       	eor	r22, r22
     198:	66 1f       	adc	r22, r22
     19a:	8f e1       	ldi	r24, 0x1F	; 31
     19c:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	82 e1       	ldi	r24, 0x12	; 18
     1a4:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     1a8:	8f e9       	ldi	r24, 0x9F	; 159
     1aa:	9f e0       	ldi	r25, 0x0F	; 15
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_WriteData+0x52>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_WriteData+0x58>
     1b2:	00 00       	nop
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	82 e1       	ldi	r24, 0x12	; 18
     1b8:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     1bc:	8f e9       	ldi	r24, 0x9F	; 159
     1be:	9f e0       	ldi	r25, 0x0F	; 15
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_WriteData+0x66>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_WriteData+0x6c>
     1c6:	00 00       	nop
     1c8:	6c 2f       	mov	r22, r28
     1ca:	61 70       	andi	r22, 0x01	; 1
     1cc:	8c e1       	ldi	r24, 0x1C	; 28
     1ce:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     1d2:	c1 fb       	bst	r28, 1
     1d4:	66 27       	eor	r22, r22
     1d6:	60 f9       	bld	r22, 0
     1d8:	8d e1       	ldi	r24, 0x1D	; 29
     1da:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     1de:	c2 fb       	bst	r28, 2
     1e0:	66 27       	eor	r22, r22
     1e2:	60 f9       	bld	r22, 0
     1e4:	87 e1       	ldi	r24, 0x17	; 23
     1e6:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     1ea:	c3 fb       	bst	r28, 3
     1ec:	66 27       	eor	r22, r22
     1ee:	60 f9       	bld	r22, 0
     1f0:	8f e1       	ldi	r24, 0x1F	; 31
     1f2:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	82 e1       	ldi	r24, 0x12	; 18
     1fa:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     1fe:	8f e9       	ldi	r24, 0x9F	; 159
     200:	9f e0       	ldi	r25, 0x0F	; 15
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <LCD_WriteData+0xa8>
     206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_WriteData+0xae>
     208:	00 00       	nop
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	82 e1       	ldi	r24, 0x12	; 18
     20e:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     212:	8f e9       	ldi	r24, 0x9F	; 159
     214:	9f e0       	ldi	r25, 0x0F	; 15
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <LCD_WriteData+0xbc>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_WriteData+0xc2>
     21c:	00 00       	nop
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <LCD_Init>:
     222:	2f ef       	ldi	r18, 0xFF	; 255
     224:	80 e7       	ldi	r24, 0x70	; 112
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	21 50       	subi	r18, 0x01	; 1
     22a:	80 40       	sbci	r24, 0x00	; 0
     22c:	90 40       	sbci	r25, 0x00	; 0
     22e:	e1 f7       	brne	.-8      	; 0x228 <LCD_Init+0x6>
     230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_Init+0x10>
     232:	00 00       	nop
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
     23a:	8f e9       	ldi	r24, 0x9F	; 159
     23c:	9f e0       	ldi	r25, 0x0F	; 15
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <LCD_Init+0x1c>
     242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_Init+0x22>
     244:	00 00       	nop
     246:	88 e2       	ldi	r24, 0x28	; 40
     248:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
     24c:	8f e9       	ldi	r24, 0x9F	; 159
     24e:	9f e0       	ldi	r25, 0x0F	; 15
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Init+0x2e>
     254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Init+0x34>
     256:	00 00       	nop
     258:	8c e0       	ldi	r24, 0x0C	; 12
     25a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
     25e:	8f e9       	ldi	r24, 0x9F	; 159
     260:	9f e0       	ldi	r25, 0x0F	; 15
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LCD_Init+0x40>
     266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_Init+0x46>
     268:	00 00       	nop
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
     270:	8f e3       	ldi	r24, 0x3F	; 63
     272:	9f e1       	ldi	r25, 0x1F	; 31
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <LCD_Init+0x52>
     278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_Init+0x58>
     27a:	00 00       	nop
     27c:	86 e0       	ldi	r24, 0x06	; 6
     27e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
     282:	8f e9       	ldi	r24, 0x9F	; 159
     284:	9f e0       	ldi	r25, 0x0F	; 15
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LCD_Init+0x64>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_Init+0x6a>
     28c:	00 00       	nop
     28e:	08 95       	ret

00000290 <LCD_WriteString>:
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	8c 01       	movw	r16, r24
     298:	c0 e0       	ldi	r28, 0x00	; 0
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCD_WriteString+0x12>
     29c:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_WriteData>
     2a0:	cf 5f       	subi	r28, 0xFF	; 255
     2a2:	f8 01       	movw	r30, r16
     2a4:	ec 0f       	add	r30, r28
     2a6:	f1 1d       	adc	r31, r1
     2a8:	80 81       	ld	r24, Z
     2aa:	81 11       	cpse	r24, r1
     2ac:	f7 cf       	rjmp	.-18     	; 0x29c <LCD_WriteString+0xc>
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	08 95       	ret

000002b6 <LCD_WriteNumber>:
     2b6:	2f 92       	push	r2
     2b8:	3f 92       	push	r3
     2ba:	4f 92       	push	r4
     2bc:	5f 92       	push	r5
     2be:	6f 92       	push	r6
     2c0:	7f 92       	push	r7
     2c2:	8f 92       	push	r8
     2c4:	9f 92       	push	r9
     2c6:	af 92       	push	r10
     2c8:	bf 92       	push	r11
     2ca:	cf 92       	push	r12
     2cc:	df 92       	push	r13
     2ce:	ef 92       	push	r14
     2d0:	ff 92       	push	r15
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	61 97       	sbiw	r28, 0x11	; 17
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	29 8b       	std	Y+17, r18	; 0x11
     2ec:	83 2e       	mov	r8, r19
     2ee:	74 2e       	mov	r7, r20
     2f0:	65 2e       	mov	r6, r21
     2f2:	56 2e       	mov	r5, r22
     2f4:	47 2e       	mov	r4, r23
     2f6:	38 2e       	mov	r3, r24
     2f8:	29 2e       	mov	r2, r25
     2fa:	fe 01       	movw	r30, r28
     2fc:	31 96       	adiw	r30, 0x01	; 1
     2fe:	80 e1       	ldi	r24, 0x10	; 16
     300:	df 01       	movw	r26, r30
     302:	1d 92       	st	X+, r1
     304:	8a 95       	dec	r24
     306:	e9 f7       	brne	.-6      	; 0x302 <LCD_WriteNumber+0x4c>
     308:	29 89       	ldd	r18, Y+17	; 0x11
     30a:	83 2d       	mov	r24, r3
     30c:	a0 e0       	ldi	r26, 0x00	; 0
     30e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__cmpdi2_s8>
     312:	21 f4       	brne	.+8      	; 0x31c <LCD_WriteNumber+0x66>
     314:	80 e3       	ldi	r24, 0x30	; 48
     316:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_WriteData>
     31a:	62 c0       	rjmp	.+196    	; 0x3e0 <LCD_WriteNumber+0x12a>
     31c:	29 89       	ldd	r18, Y+17	; 0x11
     31e:	83 2d       	mov	r24, r3
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__cmpdi2_s8>
     326:	6c f4       	brge	.+26     	; 0x342 <LCD_WriteNumber+0x8c>
     328:	0e 94 29 0b 	call	0x1652	; 0x1652 <__negdi2>
     32c:	29 8b       	std	Y+17, r18	; 0x11
     32e:	83 2e       	mov	r8, r19
     330:	74 2e       	mov	r7, r20
     332:	65 2e       	mov	r6, r21
     334:	56 2e       	mov	r5, r22
     336:	47 2e       	mov	r4, r23
     338:	38 2e       	mov	r3, r24
     33a:	29 2e       	mov	r2, r25
     33c:	8d e2       	ldi	r24, 0x2D	; 45
     33e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_WriteData>
     342:	91 2c       	mov	r9, r1
     344:	30 c0       	rjmp	.+96     	; 0x3a6 <LCD_WriteNumber+0xf0>
     346:	0f 2e       	mov	r0, r31
     348:	fa e0       	ldi	r31, 0x0A	; 10
     34a:	af 2e       	mov	r10, r31
     34c:	f0 2d       	mov	r31, r0
     34e:	b1 2c       	mov	r11, r1
     350:	c1 2c       	mov	r12, r1
     352:	d1 2c       	mov	r13, r1
     354:	e1 2c       	mov	r14, r1
     356:	f1 2c       	mov	r15, r1
     358:	00 e0       	ldi	r16, 0x00	; 0
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	29 89       	ldd	r18, Y+17	; 0x11
     35e:	38 2d       	mov	r19, r8
     360:	47 2d       	mov	r20, r7
     362:	56 2d       	mov	r21, r6
     364:	65 2d       	mov	r22, r5
     366:	74 2d       	mov	r23, r4
     368:	83 2d       	mov	r24, r3
     36a:	92 2d       	mov	r25, r2
     36c:	0e 94 99 0a 	call	0x1532	; 0x1532 <__moddi3>
     370:	e1 e0       	ldi	r30, 0x01	; 1
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	ec 0f       	add	r30, r28
     376:	fd 1f       	adc	r31, r29
     378:	e9 0d       	add	r30, r9
     37a:	f1 1d       	adc	r31, r1
     37c:	20 5d       	subi	r18, 0xD0	; 208
     37e:	20 83       	st	Z, r18
     380:	93 94       	inc	r9
     382:	29 89       	ldd	r18, Y+17	; 0x11
     384:	38 2d       	mov	r19, r8
     386:	47 2d       	mov	r20, r7
     388:	56 2d       	mov	r21, r6
     38a:	65 2d       	mov	r22, r5
     38c:	74 2d       	mov	r23, r4
     38e:	83 2d       	mov	r24, r3
     390:	92 2d       	mov	r25, r2
     392:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__divdi3>
     396:	29 8b       	std	Y+17, r18	; 0x11
     398:	83 2e       	mov	r8, r19
     39a:	74 2e       	mov	r7, r20
     39c:	65 2e       	mov	r6, r21
     39e:	56 2e       	mov	r5, r22
     3a0:	47 2e       	mov	r4, r23
     3a2:	38 2e       	mov	r3, r24
     3a4:	29 2e       	mov	r2, r25
     3a6:	29 89       	ldd	r18, Y+17	; 0x11
     3a8:	38 2d       	mov	r19, r8
     3aa:	47 2d       	mov	r20, r7
     3ac:	56 2d       	mov	r21, r6
     3ae:	65 2d       	mov	r22, r5
     3b0:	74 2d       	mov	r23, r4
     3b2:	83 2d       	mov	r24, r3
     3b4:	92 2d       	mov	r25, r2
     3b6:	a0 e0       	ldi	r26, 0x00	; 0
     3b8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__cmpdi2_s8>
     3bc:	09 f0       	breq	.+2      	; 0x3c0 <LCD_WriteNumber+0x10a>
     3be:	1c f6       	brge	.-122    	; 0x346 <LCD_WriteNumber+0x90>
     3c0:	0d c0       	rjmp	.+26     	; 0x3dc <LCD_WriteNumber+0x126>
     3c2:	e9 2d       	mov	r30, r9
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	31 97       	sbiw	r30, 0x01	; 1
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	8c 0f       	add	r24, r28
     3ce:	9d 1f       	adc	r25, r29
     3d0:	e8 0f       	add	r30, r24
     3d2:	f9 1f       	adc	r31, r25
     3d4:	80 81       	ld	r24, Z
     3d6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_WriteData>
     3da:	9a 94       	dec	r9
     3dc:	91 10       	cpse	r9, r1
     3de:	f1 cf       	rjmp	.-30     	; 0x3c2 <LCD_WriteNumber+0x10c>
     3e0:	61 96       	adiw	r28, 0x11	; 17
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	bf 90       	pop	r11
     3fe:	af 90       	pop	r10
     400:	9f 90       	pop	r9
     402:	8f 90       	pop	r8
     404:	7f 90       	pop	r7
     406:	6f 90       	pop	r6
     408:	5f 90       	pop	r5
     40a:	4f 90       	pop	r4
     40c:	3f 90       	pop	r3
     40e:	2f 90       	pop	r2
     410:	08 95       	ret

00000412 <LCD_GoTo>:
}

void LCD_GoTo(u8 Line, u8 x)
{
	
	if (Line==0)
     412:	81 11       	cpse	r24, r1
     414:	05 c0       	rjmp	.+10     	; 0x420 <LCD_GoTo+0xe>
	{
		LCD_WriteCommand(0x80+x);
     416:	80 e8       	ldi	r24, 0x80	; 128
     418:	86 0f       	add	r24, r22
     41a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
     41e:	08 95       	ret
	}
	else if (Line==1)
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	21 f4       	brne	.+8      	; 0x42c <LCD_GoTo+0x1a>
	{
		LCD_WriteCommand(0x80+0x40+x);
     424:	80 ec       	ldi	r24, 0xC0	; 192
     426:	86 0f       	add	r24, r22
     428:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
     42c:	08 95       	ret

0000042e <ICU_FUN>:
			}else if(i>=8 && i<16){
				ST2= (ST2<<1) |Tbit;
			}		
		}
		return TEMP;
}
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Count.1929>
     438:	8f 5f       	subi	r24, 0xFF	; 255
     43a:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <Count.1929>
     43e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <flag>
     442:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <flag+0x1>
     446:	89 2b       	or	r24, r25
     448:	81 f4       	brne	.+32     	; 0x46a <ICU_FUN+0x3c>
     44a:	86 b5       	in	r24, 0x26	; 38
     44c:	97 b5       	in	r25, 0x27	; 39
     44e:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <t1+0x1>
     452:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <t1>
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	0e 94 29 07 	call	0xe52	; 0xe52 <Timer1_InputCaptureEdge>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <flag+0x1>
     464:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <flag>
     468:	3d c0       	rjmp	.+122    	; 0x4e4 <ICU_FUN+0xb6>
     46a:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <flag>
     46e:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <flag+0x1>
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	b9 f5       	brne	.+110    	; 0x4e4 <ICU_FUN+0xb6>
     476:	86 b5       	in	r24, 0x26	; 38
     478:	97 b5       	in	r25, 0x27	; 39
     47a:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <t2+0x1>
     47e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <t2>
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 29 07 	call	0xe52	; 0xe52 <Timer1_InputCaptureEdge>
     488:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <flag+0x1>
     48c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <flag>
     490:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__data_end>
     494:	c1 2f       	mov	r28, r17
     496:	d0 e0       	ldi	r29, 0x00	; 0
     498:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <t2>
     49c:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <t2+0x1>
     4a0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <t1>
     4a4:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <t1+0x1>
     4a8:	68 1b       	sub	r22, r24
     4aa:	79 0b       	sbc	r23, r25
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 8f 09 	call	0x131e	; 0x131e <__floatunsisf>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	5f e3       	ldi	r21, 0x3F	; 63
     4bc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     4c0:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fixunssfsi>
     4c4:	cd 51       	subi	r28, 0x1D	; 29
     4c6:	df 4f       	sbci	r29, 0xFF	; 255
     4c8:	68 83       	st	Y, r22
     4ca:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <t1+0x1>
     4ce:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <t1>
     4d2:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <t2+0x1>
     4d6:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <t2>
     4da:	1f 5f       	subi	r17, 0xFF	; 255
     4dc:	10 93 9c 00 	sts	0x009C, r17	; 0x80009c <__data_end>
     4e0:	1d bc       	out	0x2d, r1	; 45
     4e2:	1c bc       	out	0x2c, r1	; 44
     4e4:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Count.1929>
     4e8:	80 35       	cpi	r24, 0x50	; 80
     4ea:	31 f4       	brne	.+12     	; 0x4f8 <ICU_FUN+0xca>
     4ec:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__data_end>
     4f0:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <Count.1929>
     4f4:	0e 94 39 07 	call	0xe72	; 0xe72 <Timer1_ICU_InterruptDisable>
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	08 95       	ret

00000500 <DHT_SensorINT>:
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 29 07 	call	0xe52	; 0xe52 <Timer1_InputCaptureEdge>
     506:	87 e1       	ldi	r24, 0x17	; 23
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Timer1_ICU_SetCallBack>
     50e:	08 95       	ret

00000510 <DHT_SensorRunnable>:
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	8e e1       	ldi	r24, 0x1E	; 30
     514:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DIO_InitPin>
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	8e e1       	ldi	r24, 0x1E	; 30
     51c:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     520:	8f e4       	ldi	r24, 0x4F	; 79
     522:	94 e1       	ldi	r25, 0x14	; 20
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <DHT_SensorRunnable+0x14>
     528:	00 c0       	rjmp	.+0      	; 0x52a <DHT_SensorRunnable+0x1a>
     52a:	00 00       	nop
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	8e e1       	ldi	r24, 0x1E	; 30
     530:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
     534:	90 ea       	ldi	r25, 0xA0	; 160
     536:	9a 95       	dec	r25
     538:	f1 f7       	brne	.-4      	; 0x536 <DHT_SensorRunnable+0x26>
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	8e e1       	ldi	r24, 0x1E	; 30
     53e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DIO_InitPin>
     542:	8e e1       	ldi	r24, 0x1E	; 30
     544:	0e 94 60 05 	call	0xac0	; 0xac0 <DIO_ReadPin>
     548:	88 23       	and	r24, r24
     54a:	d9 f3       	breq	.-10     	; 0x542 <DHT_SensorRunnable+0x32>
     54c:	8e e1       	ldi	r24, 0x1E	; 30
     54e:	0e 94 60 05 	call	0xac0	; 0xac0 <DIO_ReadPin>
     552:	81 11       	cpse	r24, r1
     554:	fb cf       	rjmp	.-10     	; 0x54c <DHT_SensorRunnable+0x3c>
     556:	0e 94 35 07 	call	0xe6a	; 0xe6a <Timer1_ICU_InterruptEnable>
     55a:	08 95       	ret

0000055c <DHT_Humiditygetter>:

u16 DHT_Humiditygetter(void){
	u16 Humidity=0;
	u8 Hbit=0;
		for(u8 i=16 ;i<32;i++){
     55c:	90 e1       	ldi	r25, 0x10	; 16
		}
		return TEMP;
}

u16 DHT_Humiditygetter(void){
	u16 Humidity=0;
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
	u8 Hbit=0;
		for(u8 i=16 ;i<32;i++){
     562:	26 c0       	rjmp	.+76     	; 0x5b0 <DHT_Humiditygetter+0x54>
			if(ARRICU_DATAValue[i] == 70){
     564:	e9 2f       	mov	r30, r25
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	ed 51       	subi	r30, 0x1D	; 29
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	80 81       	ld	r24, Z
     56e:	86 34       	cpi	r24, 0x46	; 70
     570:	11 f4       	brne	.+4      	; 0x576 <DHT_Humiditygetter+0x1a>
				Hbit=1;
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	01 c0       	rjmp	.+2      	; 0x578 <DHT_Humiditygetter+0x1c>
				}else{
				Hbit=0;
     576:	60 e0       	ldi	r22, 0x00	; 0
			}			
			Humidity= (Humidity << 1) | Hbit;
     578:	22 0f       	add	r18, r18
     57a:	33 1f       	adc	r19, r19
     57c:	26 2b       	or	r18, r22
			if(i<24){
     57e:	98 31       	cpi	r25, 0x18	; 24
     580:	50 f4       	brcc	.+20     	; 0x596 <DHT_Humiditygetter+0x3a>
				SH1= (SH1<<1) |Hbit;
     582:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <SH1>
     586:	48 2f       	mov	r20, r24
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	44 0f       	add	r20, r20
     58c:	55 1f       	adc	r21, r21
     58e:	46 2b       	or	r20, r22
     590:	40 93 9f 00 	sts	0x009F, r20	; 0x80009f <SH1>
     594:	0c c0       	rjmp	.+24     	; 0x5ae <DHT_Humiditygetter+0x52>
			}else if(i>=24 && i<32){
     596:	88 ee       	ldi	r24, 0xE8	; 232
     598:	89 0f       	add	r24, r25
     59a:	88 30       	cpi	r24, 0x08	; 8
     59c:	40 f4       	brcc	.+16     	; 0x5ae <DHT_Humiditygetter+0x52>
				SH2= (SH2<<1) |Hbit;
     59e:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <SH2>
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	44 0f       	add	r20, r20
     5a6:	55 1f       	adc	r21, r21
     5a8:	46 2b       	or	r20, r22
     5aa:	40 93 9e 00 	sts	0x009E, r20	; 0x80009e <SH2>
}

u16 DHT_Humiditygetter(void){
	u16 Humidity=0;
	u8 Hbit=0;
		for(u8 i=16 ;i<32;i++){
     5ae:	9f 5f       	subi	r25, 0xFF	; 255
     5b0:	90 32       	cpi	r25, 0x20	; 32
     5b2:	c0 f2       	brcs	.-80     	; 0x564 <DHT_Humiditygetter+0x8>
			}else if(i>=24 && i<32){
				SH2= (SH2<<1) |Hbit;
			}	
		}	
		return Humidity;
}
     5b4:	c9 01       	movw	r24, r18
     5b6:	08 95       	ret

000005b8 <Check_Sum_Only>:

u16 Check_Sum_Only(void){	
u8 Hbit=0 ; 
	for (u8 i=0 ;i<=32 ;i++)
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	3c c0       	rjmp	.+120    	; 0x634 <Check_Sum_Only+0x7c>
	{
		if(ARRICU_DATAValue[i] == 70)
     5bc:	e8 2f       	mov	r30, r24
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	ed 51       	subi	r30, 0x1D	; 29
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	90 81       	ld	r25, Z
     5c6:	96 34       	cpi	r25, 0x46	; 70
     5c8:	11 f4       	brne	.+4      	; 0x5ce <Check_Sum_Only+0x16>
		{
			Hbit=1;
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <Check_Sum_Only+0x18>
		}
		else{
			Hbit=0;
     5ce:	60 e0       	ldi	r22, 0x00	; 0
		}
		
		if(i<8)
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	50 f4       	brcc	.+20     	; 0x5e8 <Check_Sum_Only+0x30>
		{
			ST1= (ST1<<1) |Hbit;
     5d4:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <ST1>
     5d8:	49 2f       	mov	r20, r25
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	44 0f       	add	r20, r20
     5de:	55 1f       	adc	r21, r21
     5e0:	46 2b       	or	r20, r22
     5e2:	40 93 a1 00 	sts	0x00A1, r20	; 0x8000a1 <ST1>
     5e6:	25 c0       	rjmp	.+74     	; 0x632 <Check_Sum_Only+0x7a>
		}
		else if(i>=8 && i<16)
     5e8:	98 ef       	ldi	r25, 0xF8	; 248
     5ea:	98 0f       	add	r25, r24
     5ec:	98 30       	cpi	r25, 0x08	; 8
     5ee:	48 f4       	brcc	.+18     	; 0x602 <Check_Sum_Only+0x4a>
		{
			ST2= (ST2<<1) |Hbit;
     5f0:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <ST2>
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	26 2b       	or	r18, r22
     5fc:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <ST2>
     600:	18 c0       	rjmp	.+48     	; 0x632 <Check_Sum_Only+0x7a>
		}
		else if(i<24)
     602:	88 31       	cpi	r24, 0x18	; 24
     604:	50 f4       	brcc	.+20     	; 0x61a <Check_Sum_Only+0x62>
		{
			SH1= (SH1<<1) |Hbit;
     606:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <SH1>
     60a:	29 2f       	mov	r18, r25
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	26 2b       	or	r18, r22
     614:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <SH1>
     618:	0c c0       	rjmp	.+24     	; 0x632 <Check_Sum_Only+0x7a>
		}
		else if(i>=24 && i<32)
     61a:	98 ee       	ldi	r25, 0xE8	; 232
     61c:	98 0f       	add	r25, r24
     61e:	98 30       	cpi	r25, 0x08	; 8
     620:	40 f4       	brcc	.+16     	; 0x632 <Check_Sum_Only+0x7a>
		{
			SH2= (SH2<<1) |Hbit;
     622:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <SH2>
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	22 0f       	add	r18, r18
     62a:	33 1f       	adc	r19, r19
     62c:	26 2b       	or	r18, r22
     62e:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <SH2>
		return Humidity;
}

u16 Check_Sum_Only(void){	
u8 Hbit=0 ; 
	for (u8 i=0 ;i<=32 ;i++)
     632:	8f 5f       	subi	r24, 0xFF	; 255
     634:	81 32       	cpi	r24, 0x21	; 33
     636:	10 f2       	brcs	.-124    	; 0x5bc <Check_Sum_Only+0x4>
		else if(i>=24 && i<32)
		{
			SH2= (SH2<<1) |Hbit;
		}
	}
	return (ST1+ST2+SH1+SH2);
     638:	20 91 a1 00 	lds	r18, 0x00A1	; 0x8000a1 <ST1>
     63c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <ST2>
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	82 0f       	add	r24, r18
     644:	91 1d       	adc	r25, r1
     646:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <SH1>
     64a:	82 0f       	add	r24, r18
     64c:	91 1d       	adc	r25, r1
     64e:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <SH2>
}
     652:	82 0f       	add	r24, r18
     654:	91 1d       	adc	r25, r1
     656:	08 95       	ret

00000658 <DHT_CRCSumgetter>:


u16 DHT_CRCSumgetter(void){
	u16 Sum=0;
	u8 Sbit=0;
	for(u8 i=32 ; i<40 ; i++){
     658:	90 e2       	ldi	r25, 0x20	; 32
	return (ST1+ST2+SH1+SH2);
}


u16 DHT_CRCSumgetter(void){
	u16 Sum=0;
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
	u8 Sbit=0;
	for(u8 i=32 ; i<40 ; i++){
     65e:	0e c0       	rjmp	.+28     	; 0x67c <DHT_CRCSumgetter+0x24>
			if(ARRICU_DATAValue[i] == 70){
     660:	e9 2f       	mov	r30, r25
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	ed 51       	subi	r30, 0x1D	; 29
     666:	ff 4f       	sbci	r31, 0xFF	; 255
     668:	80 81       	ld	r24, Z
     66a:	86 34       	cpi	r24, 0x46	; 70
     66c:	11 f4       	brne	.+4      	; 0x672 <DHT_CRCSumgetter+0x1a>
				Sbit=1;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	01 c0       	rjmp	.+2      	; 0x674 <DHT_CRCSumgetter+0x1c>
				}else{
				Sbit=0;
     672:	80 e0       	ldi	r24, 0x00	; 0
			}			
			Sum= (Sum << 1) | Sbit;	
     674:	22 0f       	add	r18, r18
     676:	33 1f       	adc	r19, r19
     678:	28 2b       	or	r18, r24


u16 DHT_CRCSumgetter(void){
	u16 Sum=0;
	u8 Sbit=0;
	for(u8 i=32 ; i<40 ; i++){
     67a:	9f 5f       	subi	r25, 0xFF	; 255
     67c:	98 32       	cpi	r25, 0x28	; 40
     67e:	80 f3       	brcs	.-32     	; 0x660 <DHT_CRCSumgetter+0x8>
				Sbit=0;
			}			
			Sum= (Sum << 1) | Sbit;	
	}
	return Sum;
}
     680:	c9 01       	movw	r24, r18
     682:	08 95       	ret

00000684 <vMillisIncrement>:
// ISR Callback
void vMillisIncrement(void)
{	
	static u16 u16_100uSecCounter = 0;
	static u16 u16_millisCounter = 0;
	u16_100uSecCounter++;
     684:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u16_100uSecCounter.2110>
     688:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u16_100uSecCounter.2110+0x1>
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <u16_100uSecCounter.2110+0x1>
     692:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u16_100uSecCounter.2110>

	if(u16_100uSecCounter >= 10)
     696:	0a 97       	sbiw	r24, 0x0a	; 10
     698:	68 f0       	brcs	.+26     	; 0x6b4 <vMillisIncrement+0x30>
	{
		u16_100uSecCounter = 0;
     69a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u16_100uSecCounter.2110+0x1>
     69e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <u16_100uSecCounter.2110>
		u16_millisCounter++;
     6a2:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_millisCounter.2111>
     6a6:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_millisCounter.2111+0x1>
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <u16_millisCounter.2111+0x1>
     6b0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <u16_millisCounter.2111>
	}

	if(u16_millisCounter >= 1000)
     6b4:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_millisCounter.2111>
     6b8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_millisCounter.2111+0x1>
     6bc:	88 3e       	cpi	r24, 0xE8	; 232
     6be:	93 40       	sbci	r25, 0x03	; 3
     6c0:	30 f0       	brcs	.+12     	; 0x6ce <vMillisIncrement+0x4a>
	{
		// To be called every 1 Sec
		OS_Task_Handler();
     6c2:	0e 94 30 08 	call	0x1060	; 0x1060 <OS_Task_Handler>
		// Reset u16_millisCounter
		u16_millisCounter = 0;
     6c6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <u16_millisCounter.2111+0x1>
     6ca:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <u16_millisCounter.2111>
	}
	TCNT0 = 156;  // to int timer to calculation 1us
     6ce:	8c e9       	ldi	r24, 0x9C	; 156
     6d0:	82 bf       	out	0x32, r24	; 50
     6d2:	08 95       	ret

000006d4 <vInitEcu>:
}



void vInitEcu(void)
{
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	2a 97       	sbiw	r28, 0x0a	; 10
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
	u8 str[] = {"Seconds: "};
     6e8:	8a e0       	ldi	r24, 0x0A	; 10
     6ea:	e2 e6       	ldi	r30, 0x62	; 98
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	de 01       	movw	r26, r28
     6f0:	11 96       	adiw	r26, 0x01	; 1
     6f2:	01 90       	ld	r0, Z+
     6f4:	0d 92       	st	X+, r0
     6f6:	8a 95       	dec	r24
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <vInitEcu+0x1e>
	Timer0_Init(TIMER0_NORMAL_MODE, TIMER0_SCALER_8, OCO_DISCONNECTED);
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	62 e0       	ldi	r22, 0x02	; 2
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 10 06 	call	0xc20	; 0xc20 <Timer0_Init>
	Timer0_OV_InterruptEnable();
     704:	0e 94 5d 06 	call	0xcba	; 0xcba <Timer0_OV_InterruptEnable>
	Timer0_OC_SetCallBack(vMillisIncrement);
     708:	82 e4       	ldi	r24, 0x42	; 66
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Timer0_OC_SetCallBack>
	
Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_8,OCRA_DISCONNECTED,OCRB_DISCONNECTED);
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	62 e0       	ldi	r22, 0x02	; 2
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 8f 06 	call	0xd1e	; 0xd1e <Timer1_Init>
TCNT1=0;
     71c:	1d bc       	out	0x2d, r1	; 45
     71e:	1c bc       	out	0x2c, r1	; 44

	sei();
     720:	78 94       	sei
	DIO_Init();
     722:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_Init>
	DIO_InitPin(PINB0,OUTPUT);
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DIO_InitPin>
	DIO_InitPin(PINB2,OUTPUT);
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	8a e0       	ldi	r24, 0x0A	; 10
     732:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DIO_InitPin>

	DIO_WritePin(PINB0,LOW);
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	88 e0       	ldi	r24, 0x08	; 8
     73a:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
	DIO_WritePin(PINB2,LOW);
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	8a e0       	ldi	r24, 0x0A	; 10
     742:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>

	LCD_Init();
     746:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Init>
	LCD_WriteString(str);
     74a:	ce 01       	movw	r24, r28
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteString>
    DHT_SensorINT();
     752:	0e 94 80 02 	call	0x500	; 0x500 <DHT_SensorINT>
}
     756:	2a 96       	adiw	r28, 0x0a	; 10
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <InitScheduler>:
*/

void InitScheduler(void)
{
	// 1 ->mean (0.5)s because mcu 16MHZ
	OS_TaskCreate(Task_1S_LcdUpdate,1,BLOCKED);
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	80 e4       	ldi	r24, 0x40	; 64
     76e:	99 e0       	ldi	r25, 0x09	; 9
     770:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_TaskCreate>
	
	OS_TaskCreate(Task_Pump_Control,2,SUSPENDED);
     774:	42 e0       	ldi	r20, 0x02	; 2
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	8d ef       	ldi	r24, 0xFD	; 253
     77a:	98 e0       	ldi	r25, 0x08	; 8
     77c:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_TaskCreate>
	
	OS_TaskCreate(Task_Critical_Irrigation,15,BLOCKED); // 15 s
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	6f e0       	ldi	r22, 0x0F	; 15
     784:	81 eb       	ldi	r24, 0xB1	; 177
     786:	98 e0       	ldi	r25, 0x08	; 8
     788:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_TaskCreate>
	
	OS_TaskCreate(Task_Periodic_Irrigation, 60 ,BLOCKED); // 60 s
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	6c e3       	ldi	r22, 0x3C	; 60
     790:	83 e9       	ldi	r24, 0x93	; 147
     792:	98 e0       	ldi	r25, 0x08	; 8
     794:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_TaskCreate>
	
	OS_TaskCreate(Task_SensorRunnable,5,BLOCKED); // 5 s
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	65 e0       	ldi	r22, 0x05	; 5
     79c:	80 e9       	ldi	r24, 0x90	; 144
     79e:	98 e0       	ldi	r25, 0x08	; 8
     7a0:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_TaskCreate>
	
	OS_TaskCreate(Task_ErrorHandle,6,BLOCKED);
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	66 e0       	ldi	r22, 0x06	; 6
     7a8:	85 ec       	ldi	r24, 0xC5	; 197
     7aa:	98 e0       	ldi	r25, 0x08	; 8
     7ac:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_TaskCreate>
	
	OS_TaskCreate(Task_DisplaySystem,10,BLOCKED); //10sec
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	6a e0       	ldi	r22, 0x0A	; 10
     7b4:	81 e1       	ldi	r24, 0x11	; 17
     7b6:	99 e0       	ldi	r25, 0x09	; 9
     7b8:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_TaskCreate>
     7bc:	08 95       	ret

000007be <main>:


int main(void)
{
	// Sw initilaization
	vInitEcu();
     7be:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <vInitEcu>
   
	// Start the Scheduler
	InitScheduler();
     7c2:	0e 94 b4 03 	call	0x768	; 0x768 <InitScheduler>
	
	while(1)
	{
		// Execute the scheduler
		OS_TaskExecution();
     7c6:	0e 94 6d 08 	call	0x10da	; 0x10da <OS_TaskExecution>
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <main+0x8>

000007cc <DIO_InitPin>:
void DIO_InitPin(DIO_Pin_type pin ,DIO_PinStatus_type status)
{
	u8 pin_num;
	DIO_Port_type Port;
	
	Port=pin/8;
     7cc:	98 2f       	mov	r25, r24
     7ce:	96 95       	lsr	r25
     7d0:	96 95       	lsr	r25
     7d2:	96 95       	lsr	r25
	pin_num=pin%8;
     7d4:	87 70       	andi	r24, 0x07	; 7
	
	switch (status)
     7d6:	61 30       	cpi	r22, 0x01	; 1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <DIO_InitPin+0x10>
     7da:	90 c0       	rjmp	.+288    	; 0x8fc <__stack+0x9d>
     7dc:	18 f0       	brcs	.+6      	; 0x7e4 <DIO_InitPin+0x18>
     7de:	62 30       	cpi	r22, 0x02	; 2
     7e0:	e9 f1       	breq	.+122    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     7e2:	08 95       	ret
	{
		case OUTPUT:
		switch (Port)
     7e4:	91 30       	cpi	r25, 0x01	; 1
     7e6:	99 f0       	breq	.+38     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7e8:	28 f0       	brcs	.+10     	; 0x7f4 <DIO_InitPin+0x28>
     7ea:	92 30       	cpi	r25, 0x02	; 2
     7ec:	e9 f0       	breq	.+58     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     7ee:	93 30       	cpi	r25, 0x03	; 3
     7f0:	41 f1       	breq	.+80     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     7f2:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,pin_num);
     7f4:	4a b3       	in	r20, 0x1a	; 26
     7f6:	21 e0       	ldi	r18, 0x01	; 1
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	b9 01       	movw	r22, r18
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7fe:	66 0f       	add	r22, r22
     800:	77 1f       	adc	r23, r23
     802:	8a 95       	dec	r24
     804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_InitPin+0x32>
     806:	cb 01       	movw	r24, r22
     808:	84 2b       	or	r24, r20
     80a:	8a bb       	out	0x1a, r24	; 26
			break;
     80c:	08 95       	ret
			case PB:
			SET_BIT(DDRB,pin_num);
     80e:	47 b3       	in	r20, 0x17	; 23
     810:	21 e0       	ldi	r18, 0x01	; 1
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	b9 01       	movw	r22, r18
     816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     818:	66 0f       	add	r22, r22
     81a:	77 1f       	adc	r23, r23
     81c:	8a 95       	dec	r24
     81e:	e2 f7       	brpl	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     820:	cb 01       	movw	r24, r22
     822:	84 2b       	or	r24, r20
     824:	87 bb       	out	0x17, r24	; 23
			break;
     826:	08 95       	ret
			case PC:
			SET_BIT(DDRC,pin_num);
     828:	44 b3       	in	r20, 0x14	; 20
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	b9 01       	movw	r22, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	8a 95       	dec	r24
     838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     83a:	cb 01       	movw	r24, r22
     83c:	84 2b       	or	r24, r20
     83e:	84 bb       	out	0x14, r24	; 20
			break;
     840:	08 95       	ret
			case PD:
			SET_BIT(DDRD,pin_num);
     842:	41 b3       	in	r20, 0x11	; 17
     844:	21 e0       	ldi	r18, 0x01	; 1
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	b9 01       	movw	r22, r18
     84a:	02 c0       	rjmp	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     84c:	66 0f       	add	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	8a 95       	dec	r24
     852:	e2 f7       	brpl	.-8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     854:	cb 01       	movw	r24, r22
     856:	84 2b       	or	r24, r20
     858:	81 bb       	out	0x11, r24	; 17
			break;
     85a:	08 95       	ret
		}
		break;
		case INLLUP:
		switch (Port)
     85c:	91 30       	cpi	r25, 0x01	; 1
     85e:	c1 f0       	breq	.+48     	; 0x890 <__stack+0x31>
     860:	28 f0       	brcs	.+10     	; 0x86c <__stack+0xd>
     862:	92 30       	cpi	r25, 0x02	; 2
     864:	39 f1       	breq	.+78     	; 0x8b4 <__stack+0x55>
     866:	93 30       	cpi	r25, 0x03	; 3
     868:	b9 f1       	breq	.+110    	; 0x8d8 <__stack+0x79>
     86a:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
     86c:	4a b3       	in	r20, 0x1a	; 26
     86e:	21 e0       	ldi	r18, 0x01	; 1
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	b9 01       	movw	r22, r18
     874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
     876:	66 0f       	add	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	8a 95       	dec	r24
     87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
     87e:	cb 01       	movw	r24, r22
     880:	96 2f       	mov	r25, r22
     882:	90 95       	com	r25
     884:	94 23       	and	r25, r20
     886:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
     888:	9b b3       	in	r25, 0x1b	; 27
     88a:	89 2b       	or	r24, r25
     88c:	8b bb       	out	0x1b, r24	; 27
			break;
     88e:	08 95       	ret
			case PB:
			CLEAR_BIT(DDRB,pin_num);
     890:	47 b3       	in	r20, 0x17	; 23
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	b9 01       	movw	r22, r18
     898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
     89a:	66 0f       	add	r22, r22
     89c:	77 1f       	adc	r23, r23
     89e:	8a 95       	dec	r24
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
     8a2:	cb 01       	movw	r24, r22
     8a4:	96 2f       	mov	r25, r22
     8a6:	90 95       	com	r25
     8a8:	94 23       	and	r25, r20
     8aa:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
     8ac:	98 b3       	in	r25, 0x18	; 24
     8ae:	89 2b       	or	r24, r25
     8b0:	88 bb       	out	0x18, r24	; 24
			break;
     8b2:	08 95       	ret
			case PC:
			CLEAR_BIT(DDRC,pin_num);
     8b4:	44 b3       	in	r20, 0x14	; 20
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	b9 01       	movw	r22, r18
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
     8be:	66 0f       	add	r22, r22
     8c0:	77 1f       	adc	r23, r23
     8c2:	8a 95       	dec	r24
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
     8c6:	cb 01       	movw	r24, r22
     8c8:	96 2f       	mov	r25, r22
     8ca:	90 95       	com	r25
     8cc:	94 23       	and	r25, r20
     8ce:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
     8d0:	95 b3       	in	r25, 0x15	; 21
     8d2:	89 2b       	or	r24, r25
     8d4:	85 bb       	out	0x15, r24	; 21
			break;
     8d6:	08 95       	ret
			case PD:
			CLEAR_BIT(DDRD,pin_num);
     8d8:	41 b3       	in	r20, 0x11	; 17
     8da:	21 e0       	ldi	r18, 0x01	; 1
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	b9 01       	movw	r22, r18
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
     8e2:	66 0f       	add	r22, r22
     8e4:	77 1f       	adc	r23, r23
     8e6:	8a 95       	dec	r24
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <__stack+0x83>
     8ea:	cb 01       	movw	r24, r22
     8ec:	96 2f       	mov	r25, r22
     8ee:	90 95       	com	r25
     8f0:	94 23       	and	r25, r20
     8f2:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
     8f4:	92 b3       	in	r25, 0x12	; 18
     8f6:	89 2b       	or	r24, r25
     8f8:	82 bb       	out	0x12, r24	; 18
			break;
     8fa:	08 95       	ret
		}
		break;
		case INFREE:
		switch (Port)
     8fc:	91 30       	cpi	r25, 0x01	; 1
     8fe:	c1 f0       	breq	.+48     	; 0x930 <__stack+0xd1>
     900:	28 f0       	brcs	.+10     	; 0x90c <__stack+0xad>
     902:	92 30       	cpi	r25, 0x02	; 2
     904:	39 f1       	breq	.+78     	; 0x954 <__stack+0xf5>
     906:	93 30       	cpi	r25, 0x03	; 3
     908:	b9 f1       	breq	.+110    	; 0x978 <__stack+0x119>
     90a:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
     90c:	4a b3       	in	r20, 0x1a	; 26
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	b9 01       	movw	r22, r18
     914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0xbb>
     916:	66 0f       	add	r22, r22
     918:	77 1f       	adc	r23, r23
     91a:	8a 95       	dec	r24
     91c:	e2 f7       	brpl	.-8      	; 0x916 <__stack+0xb7>
     91e:	cb 01       	movw	r24, r22
     920:	80 95       	com	r24
     922:	94 2f       	mov	r25, r20
     924:	98 23       	and	r25, r24
     926:	9a bb       	out	0x1a, r25	; 26
			CLEAR_BIT(PORTA,pin_num);
     928:	9b b3       	in	r25, 0x1b	; 27
     92a:	89 23       	and	r24, r25
     92c:	8b bb       	out	0x1b, r24	; 27
			break;
     92e:	08 95       	ret
			case PB:
			CLEAR_BIT(DDRB,pin_num);
     930:	47 b3       	in	r20, 0x17	; 23
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	b9 01       	movw	r22, r18
     938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0xdf>
     93a:	66 0f       	add	r22, r22
     93c:	77 1f       	adc	r23, r23
     93e:	8a 95       	dec	r24
     940:	e2 f7       	brpl	.-8      	; 0x93a <__stack+0xdb>
     942:	cb 01       	movw	r24, r22
     944:	80 95       	com	r24
     946:	94 2f       	mov	r25, r20
     948:	98 23       	and	r25, r24
     94a:	97 bb       	out	0x17, r25	; 23
			CLEAR_BIT(PORTB,pin_num);
     94c:	98 b3       	in	r25, 0x18	; 24
     94e:	89 23       	and	r24, r25
     950:	88 bb       	out	0x18, r24	; 24
			break;
     952:	08 95       	ret
			case PC:
			CLEAR_BIT(DDRC,pin_num);
     954:	44 b3       	in	r20, 0x14	; 20
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	b9 01       	movw	r22, r18
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x103>
     95e:	66 0f       	add	r22, r22
     960:	77 1f       	adc	r23, r23
     962:	8a 95       	dec	r24
     964:	e2 f7       	brpl	.-8      	; 0x95e <__stack+0xff>
     966:	cb 01       	movw	r24, r22
     968:	80 95       	com	r24
     96a:	94 2f       	mov	r25, r20
     96c:	98 23       	and	r25, r24
     96e:	94 bb       	out	0x14, r25	; 20
			CLEAR_BIT(PORTC,pin_num);
     970:	95 b3       	in	r25, 0x15	; 21
     972:	89 23       	and	r24, r25
     974:	85 bb       	out	0x15, r24	; 21
			break;
     976:	08 95       	ret
			case PD:
			CLEAR_BIT(DDRD,pin_num);
     978:	41 b3       	in	r20, 0x11	; 17
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	b9 01       	movw	r22, r18
     980:	02 c0       	rjmp	.+4      	; 0x986 <__stack+0x127>
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	8a 95       	dec	r24
     988:	e2 f7       	brpl	.-8      	; 0x982 <__stack+0x123>
     98a:	cb 01       	movw	r24, r22
     98c:	80 95       	com	r24
     98e:	94 2f       	mov	r25, r20
     990:	98 23       	and	r25, r24
     992:	91 bb       	out	0x11, r25	; 17
			CLEAR_BIT(PORTD,pin_num);
     994:	92 b3       	in	r25, 0x12	; 18
     996:	89 23       	and	r24, r25
     998:	82 bb       	out	0x12, r24	; 18
     99a:	08 95       	ret

0000099c <DIO_Init>:
		break;
	}
	
}
void DIO_Init(void)
{
     99c:	cf 93       	push	r28
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
     99e:	c0 e0       	ldi	r28, 0x00	; 0
     9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <DIO_Init+0x18>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
     9a2:	ec 2f       	mov	r30, r28
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	e4 59       	subi	r30, 0x94	; 148
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	60 81       	ld	r22, Z
     9ac:	8c 2f       	mov	r24, r28
     9ae:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DIO_InitPin>
	
}
void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
     9b2:	cf 5f       	subi	r28, 0xFF	; 255
     9b4:	c0 32       	cpi	r28, 0x20	; 32
     9b6:	a8 f3       	brcs	.-22     	; 0x9a2 <DIO_Init+0x6>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
	}
}
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type Pin,DIO_Voltage_type Value)
	{
		u8 PinNum_InPort=Pin%8;
     9bc:	98 2f       	mov	r25, r24
     9be:	97 70       	andi	r25, 0x07	; 7
		DIO_Port_type Port=Pin/8;
     9c0:	86 95       	lsr	r24
     9c2:	86 95       	lsr	r24
     9c4:	86 95       	lsr	r24
		switch (Port)
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	21 f1       	breq	.+72     	; 0xa12 <DIO_WritePin+0x56>
     9ca:	30 f0       	brcs	.+12     	; 0x9d8 <DIO_WritePin+0x1c>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	f1 f1       	breq	.+124    	; 0xa4c <DIO_WritePin+0x90>
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <DIO_WritePin+0x1a>
     9d4:	58 c0       	rjmp	.+176    	; 0xa86 <DIO_WritePin+0xca>
     9d6:	08 95       	ret
		{
			case PA:
			if (HIGH==Value)
     9d8:	61 30       	cpi	r22, 0x01	; 1
     9da:	69 f4       	brne	.+26     	; 0x9f6 <DIO_WritePin+0x3a>
			{
				SET_BIT(PORTA,PinNum_InPort);
     9dc:	4b b3       	in	r20, 0x1b	; 27
     9de:	21 e0       	ldi	r18, 0x01	; 1
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	b9 01       	movw	r22, r18
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_WritePin+0x2e>
     9e6:	66 0f       	add	r22, r22
     9e8:	77 1f       	adc	r23, r23
     9ea:	9a 95       	dec	r25
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_WritePin+0x2a>
     9ee:	cb 01       	movw	r24, r22
     9f0:	84 2b       	or	r24, r20
     9f2:	8b bb       	out	0x1b, r24	; 27
     9f4:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,PinNum_InPort);
     9f6:	4b b3       	in	r20, 0x1b	; 27
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	b9 01       	movw	r22, r18
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_WritePin+0x48>
     a00:	66 0f       	add	r22, r22
     a02:	77 1f       	adc	r23, r23
     a04:	9a 95       	dec	r25
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <DIO_WritePin+0x44>
     a08:	cb 01       	movw	r24, r22
     a0a:	80 95       	com	r24
     a0c:	84 23       	and	r24, r20
     a0e:	8b bb       	out	0x1b, r24	; 27
     a10:	08 95       	ret
			}
			break;
			case PB:
			if (HIGH==Value)
     a12:	61 30       	cpi	r22, 0x01	; 1
     a14:	69 f4       	brne	.+26     	; 0xa30 <DIO_WritePin+0x74>
			{
				SET_BIT(PORTB,PinNum_InPort);
     a16:	48 b3       	in	r20, 0x18	; 24
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	b9 01       	movw	r22, r18
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <DIO_WritePin+0x68>
     a20:	66 0f       	add	r22, r22
     a22:	77 1f       	adc	r23, r23
     a24:	9a 95       	dec	r25
     a26:	e2 f7       	brpl	.-8      	; 0xa20 <DIO_WritePin+0x64>
     a28:	cb 01       	movw	r24, r22
     a2a:	84 2b       	or	r24, r20
     a2c:	88 bb       	out	0x18, r24	; 24
     a2e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,PinNum_InPort);
     a30:	48 b3       	in	r20, 0x18	; 24
     a32:	21 e0       	ldi	r18, 0x01	; 1
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	b9 01       	movw	r22, r18
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <DIO_WritePin+0x82>
     a3a:	66 0f       	add	r22, r22
     a3c:	77 1f       	adc	r23, r23
     a3e:	9a 95       	dec	r25
     a40:	e2 f7       	brpl	.-8      	; 0xa3a <DIO_WritePin+0x7e>
     a42:	cb 01       	movw	r24, r22
     a44:	80 95       	com	r24
     a46:	84 23       	and	r24, r20
     a48:	88 bb       	out	0x18, r24	; 24
     a4a:	08 95       	ret
			}
			break;
			case PC:
			if (HIGH==Value)
     a4c:	61 30       	cpi	r22, 0x01	; 1
     a4e:	69 f4       	brne	.+26     	; 0xa6a <DIO_WritePin+0xae>
			{
				SET_BIT(PORTC,PinNum_InPort);
     a50:	45 b3       	in	r20, 0x15	; 21
     a52:	21 e0       	ldi	r18, 0x01	; 1
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	b9 01       	movw	r22, r18
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_WritePin+0xa2>
     a5a:	66 0f       	add	r22, r22
     a5c:	77 1f       	adc	r23, r23
     a5e:	9a 95       	dec	r25
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_WritePin+0x9e>
     a62:	cb 01       	movw	r24, r22
     a64:	84 2b       	or	r24, r20
     a66:	85 bb       	out	0x15, r24	; 21
     a68:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,PinNum_InPort);
     a6a:	45 b3       	in	r20, 0x15	; 21
     a6c:	21 e0       	ldi	r18, 0x01	; 1
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	b9 01       	movw	r22, r18
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <DIO_WritePin+0xbc>
     a74:	66 0f       	add	r22, r22
     a76:	77 1f       	adc	r23, r23
     a78:	9a 95       	dec	r25
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <DIO_WritePin+0xb8>
     a7c:	cb 01       	movw	r24, r22
     a7e:	80 95       	com	r24
     a80:	84 23       	and	r24, r20
     a82:	85 bb       	out	0x15, r24	; 21
     a84:	08 95       	ret
			}
			break;
			case PD:
			if (HIGH==Value)
     a86:	61 30       	cpi	r22, 0x01	; 1
     a88:	69 f4       	brne	.+26     	; 0xaa4 <DIO_WritePin+0xe8>
			{
				SET_BIT(PORTD,PinNum_InPort);
     a8a:	42 b3       	in	r20, 0x12	; 18
     a8c:	21 e0       	ldi	r18, 0x01	; 1
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	b9 01       	movw	r22, r18
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <DIO_WritePin+0xdc>
     a94:	66 0f       	add	r22, r22
     a96:	77 1f       	adc	r23, r23
     a98:	9a 95       	dec	r25
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <DIO_WritePin+0xd8>
     a9c:	cb 01       	movw	r24, r22
     a9e:	84 2b       	or	r24, r20
     aa0:	82 bb       	out	0x12, r24	; 18
     aa2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,PinNum_InPort);
     aa4:	42 b3       	in	r20, 0x12	; 18
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	b9 01       	movw	r22, r18
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <DIO_WritePin+0xf6>
     aae:	66 0f       	add	r22, r22
     ab0:	77 1f       	adc	r23, r23
     ab2:	9a 95       	dec	r25
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <DIO_WritePin+0xf2>
     ab6:	cb 01       	movw	r24, r22
     ab8:	80 95       	com	r24
     aba:	84 23       	and	r24, r20
     abc:	82 bb       	out	0x12, r24	; 18
     abe:	08 95       	ret

00000ac0 <DIO_ReadPin>:
		}
	}

	DIO_Voltage_type DIO_ReadPin(DIO_Pin_type Pin)
	{
		u8 PinNum_InPort=Pin%8;
     ac0:	28 2f       	mov	r18, r24
     ac2:	27 70       	andi	r18, 0x07	; 7
		DIO_Port_type Port=Pin/8;
     ac4:	86 95       	lsr	r24
     ac6:	86 95       	lsr	r24
     ac8:	86 95       	lsr	r24
		switch (Port)
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	79 f0       	breq	.+30     	; 0xaec <DIO_ReadPin+0x2c>
     ace:	28 f0       	brcs	.+10     	; 0xada <DIO_ReadPin+0x1a>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	a9 f0       	breq	.+42     	; 0xafe <DIO_ReadPin+0x3e>
     ad4:	83 30       	cpi	r24, 0x03	; 3
     ad6:	e1 f0       	breq	.+56     	; 0xb10 <DIO_ReadPin+0x50>
     ad8:	24 c0       	rjmp	.+72     	; 0xb22 <DIO_ReadPin+0x62>
		{
			case PA:
			return READ_BIT(PINA,PinNum_InPort);
     ada:	89 b3       	in	r24, 0x19	; 25
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <DIO_ReadPin+0x24>
     ae0:	95 95       	asr	r25
     ae2:	87 95       	ror	r24
     ae4:	2a 95       	dec	r18
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <DIO_ReadPin+0x20>
     ae8:	81 70       	andi	r24, 0x01	; 1
     aea:	08 95       	ret
			break;
			case PB:
			return READ_BIT(PINB,PinNum_InPort);
     aec:	86 b3       	in	r24, 0x16	; 22
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <DIO_ReadPin+0x36>
     af2:	95 95       	asr	r25
     af4:	87 95       	ror	r24
     af6:	2a 95       	dec	r18
     af8:	e2 f7       	brpl	.-8      	; 0xaf2 <DIO_ReadPin+0x32>
     afa:	81 70       	andi	r24, 0x01	; 1
     afc:	08 95       	ret
			break;
			case PC:
			return READ_BIT(PINC,PinNum_InPort);
     afe:	83 b3       	in	r24, 0x13	; 19
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <DIO_ReadPin+0x48>
     b04:	95 95       	asr	r25
     b06:	87 95       	ror	r24
     b08:	2a 95       	dec	r18
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <DIO_ReadPin+0x44>
     b0c:	81 70       	andi	r24, 0x01	; 1
     b0e:	08 95       	ret
			break;
			case PD:
			return READ_BIT(PIND,PinNum_InPort);
     b10:	80 b3       	in	r24, 0x10	; 16
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <DIO_ReadPin+0x5a>
     b16:	95 95       	asr	r25
     b18:	87 95       	ror	r24
     b1a:	2a 95       	dec	r18
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <DIO_ReadPin+0x56>
     b1e:	81 70       	andi	r24, 0x01	; 1
     b20:	08 95       	ret
			break;
			default:
			return 0x00;
     b22:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
     b24:	08 95       	ret

00000b26 <__vector_1>:
}



ISR(INT0_vect)
{
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	2f 93       	push	r18
     b32:	3f 93       	push	r19
     b34:	4f 93       	push	r20
     b36:	5f 93       	push	r21
     b38:	6f 93       	push	r22
     b3a:	7f 93       	push	r23
     b3c:	8f 93       	push	r24
     b3e:	9f 93       	push	r25
     b40:	af 93       	push	r26
     b42:	bf 93       	push	r27
     b44:	ef 93       	push	r30
     b46:	ff 93       	push	r31
	
	sei();
     b48:	78 94       	sei
	
	if(Fptr_INT0!=NULLPTR)
     b4a:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <Fptr_INT0>
     b4e:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <Fptr_INT0+0x1>
     b52:	30 97       	sbiw	r30, 0x00	; 0
     b54:	09 f0       	breq	.+2      	; 0xb58 <__vector_1+0x32>
	Fptr_INT0();	
     b56:	09 95       	icall

}
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	bf 91       	pop	r27
     b5e:	af 91       	pop	r26
     b60:	9f 91       	pop	r25
     b62:	8f 91       	pop	r24
     b64:	7f 91       	pop	r23
     b66:	6f 91       	pop	r22
     b68:	5f 91       	pop	r21
     b6a:	4f 91       	pop	r20
     b6c:	3f 91       	pop	r19
     b6e:	2f 91       	pop	r18
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <__vector_2>:

ISR(INT1_vect,ISR_NOBLOCK)
{
     b7a:	78 94       	sei
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	2f 93       	push	r18
     b88:	3f 93       	push	r19
     b8a:	4f 93       	push	r20
     b8c:	5f 93       	push	r21
     b8e:	6f 93       	push	r22
     b90:	7f 93       	push	r23
     b92:	8f 93       	push	r24
     b94:	9f 93       	push	r25
     b96:	af 93       	push	r26
     b98:	bf 93       	push	r27
     b9a:	ef 93       	push	r30
     b9c:	ff 93       	push	r31
	if(Fptr_INT1!=NULLPTR)
     b9e:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Fptr_INT1>
     ba2:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Fptr_INT1+0x1>
     ba6:	30 97       	sbiw	r30, 0x00	; 0
     ba8:	09 f0       	breq	.+2      	; 0xbac <__vector_2+0x32>
	{
		Fptr_INT1();
     baa:	09 95       	icall
	}
	
}
     bac:	ff 91       	pop	r31
     bae:	ef 91       	pop	r30
     bb0:	bf 91       	pop	r27
     bb2:	af 91       	pop	r26
     bb4:	9f 91       	pop	r25
     bb6:	8f 91       	pop	r24
     bb8:	7f 91       	pop	r23
     bba:	6f 91       	pop	r22
     bbc:	5f 91       	pop	r21
     bbe:	4f 91       	pop	r20
     bc0:	3f 91       	pop	r19
     bc2:	2f 91       	pop	r18
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	0f 90       	pop	r0
     bca:	1f 90       	pop	r1
     bcc:	18 95       	reti

00000bce <__vector_3>:


ISR(INT2_vect)
{
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	ef 93       	push	r30
     bee:	ff 93       	push	r31
	if(Fptr_INT2!=NULLPTR)
     bf0:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <Fptr_INT2>
     bf4:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <Fptr_INT2+0x1>
     bf8:	30 97       	sbiw	r30, 0x00	; 0
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__vector_3+0x30>
	{
		Fptr_INT2();
     bfc:	09 95       	icall
	}
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	0f 90       	pop	r0
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	0f 90       	pop	r0
     c1c:	1f 90       	pop	r1
     c1e:	18 95       	reti

00000c20 <Timer0_Init>:
{
	Timer1_OCA_Fptr=LocalFptr;
}
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_OCB_Fptr=LocalFptr;
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	69 f0       	breq	.+26     	; 0xc3e <Timer0_Init+0x1e>
     c24:	28 f0       	brcs	.+10     	; 0xc30 <Timer0_Init+0x10>
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	89 f0       	breq	.+34     	; 0xc4c <Timer0_Init+0x2c>
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	b1 f0       	breq	.+44     	; 0xc5a <Timer0_Init+0x3a>
     c2e:	1b c0       	rjmp	.+54     	; 0xc66 <Timer0_Init+0x46>
     c30:	83 b7       	in	r24, 0x33	; 51
     c32:	8f 7b       	andi	r24, 0xBF	; 191
     c34:	83 bf       	out	0x33, r24	; 51
     c36:	83 b7       	in	r24, 0x33	; 51
     c38:	87 7f       	andi	r24, 0xF7	; 247
     c3a:	83 bf       	out	0x33, r24	; 51
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <Timer0_Init+0x46>
     c3e:	83 b7       	in	r24, 0x33	; 51
     c40:	80 64       	ori	r24, 0x40	; 64
     c42:	83 bf       	out	0x33, r24	; 51
     c44:	83 b7       	in	r24, 0x33	; 51
     c46:	87 7f       	andi	r24, 0xF7	; 247
     c48:	83 bf       	out	0x33, r24	; 51
     c4a:	0d c0       	rjmp	.+26     	; 0xc66 <Timer0_Init+0x46>
     c4c:	83 b7       	in	r24, 0x33	; 51
     c4e:	8f 7b       	andi	r24, 0xBF	; 191
     c50:	83 bf       	out	0x33, r24	; 51
     c52:	83 b7       	in	r24, 0x33	; 51
     c54:	88 60       	ori	r24, 0x08	; 8
     c56:	83 bf       	out	0x33, r24	; 51
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <Timer0_Init+0x46>
     c5a:	83 b7       	in	r24, 0x33	; 51
     c5c:	80 64       	ori	r24, 0x40	; 64
     c5e:	83 bf       	out	0x33, r24	; 51
     c60:	83 b7       	in	r24, 0x33	; 51
     c62:	88 60       	ori	r24, 0x08	; 8
     c64:	83 bf       	out	0x33, r24	; 51
     c66:	83 b7       	in	r24, 0x33	; 51
     c68:	88 7f       	andi	r24, 0xF8	; 248
     c6a:	83 bf       	out	0x33, r24	; 51
     c6c:	83 b7       	in	r24, 0x33	; 51
     c6e:	68 2b       	or	r22, r24
     c70:	63 bf       	out	0x33, r22	; 51
     c72:	41 30       	cpi	r20, 0x01	; 1
     c74:	69 f0       	breq	.+26     	; 0xc90 <Timer0_Init+0x70>
     c76:	28 f0       	brcs	.+10     	; 0xc82 <Timer0_Init+0x62>
     c78:	42 30       	cpi	r20, 0x02	; 2
     c7a:	89 f0       	breq	.+34     	; 0xc9e <Timer0_Init+0x7e>
     c7c:	43 30       	cpi	r20, 0x03	; 3
     c7e:	b1 f0       	breq	.+44     	; 0xcac <Timer0_Init+0x8c>
     c80:	08 95       	ret
     c82:	83 b7       	in	r24, 0x33	; 51
     c84:	8f 7e       	andi	r24, 0xEF	; 239
     c86:	83 bf       	out	0x33, r24	; 51
     c88:	83 b7       	in	r24, 0x33	; 51
     c8a:	8f 7d       	andi	r24, 0xDF	; 223
     c8c:	83 bf       	out	0x33, r24	; 51
     c8e:	08 95       	ret
     c90:	83 b7       	in	r24, 0x33	; 51
     c92:	80 61       	ori	r24, 0x10	; 16
     c94:	83 bf       	out	0x33, r24	; 51
     c96:	83 b7       	in	r24, 0x33	; 51
     c98:	8f 7d       	andi	r24, 0xDF	; 223
     c9a:	83 bf       	out	0x33, r24	; 51
     c9c:	08 95       	ret
     c9e:	83 b7       	in	r24, 0x33	; 51
     ca0:	8f 7e       	andi	r24, 0xEF	; 239
     ca2:	83 bf       	out	0x33, r24	; 51
     ca4:	83 b7       	in	r24, 0x33	; 51
     ca6:	80 62       	ori	r24, 0x20	; 32
     ca8:	83 bf       	out	0x33, r24	; 51
     caa:	08 95       	ret
     cac:	83 b7       	in	r24, 0x33	; 51
     cae:	80 61       	ori	r24, 0x10	; 16
     cb0:	83 bf       	out	0x33, r24	; 51
     cb2:	83 b7       	in	r24, 0x33	; 51
     cb4:	80 62       	ori	r24, 0x20	; 32
     cb6:	83 bf       	out	0x33, r24	; 51
     cb8:	08 95       	ret

00000cba <Timer0_OV_InterruptEnable>:
     cba:	89 b7       	in	r24, 0x39	; 57
     cbc:	81 60       	ori	r24, 0x01	; 1
     cbe:	89 bf       	out	0x39, r24	; 57
     cc0:	08 95       	ret

00000cc2 <Timer0_OC_SetCallBack>:
     cc2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <Timer0_OVF_Fptr+0x1>
     cc6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <Timer0_OVF_Fptr>
     cca:	08 95       	ret

00000ccc <__vector_11>:
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	2f 93       	push	r18
     cd8:	3f 93       	push	r19
     cda:	4f 93       	push	r20
     cdc:	5f 93       	push	r21
     cde:	6f 93       	push	r22
     ce0:	7f 93       	push	r23
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
     ce6:	af 93       	push	r26
     ce8:	bf 93       	push	r27
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
     cee:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <Timer0_OVF_Fptr>
     cf2:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <Timer0_OVF_Fptr+0x1>
     cf6:	30 97       	sbiw	r30, 0x00	; 0
     cf8:	09 f0       	breq	.+2      	; 0xcfc <__vector_11+0x30>
     cfa:	09 95       	icall
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <Timer1_Init>:
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	29 f1       	breq	.+74     	; 0xd6c <Timer1_Init+0x4e>
     d22:	28 f4       	brcc	.+10     	; 0xd2e <Timer1_Init+0x10>
     d24:	88 23       	and	r24, r24
     d26:	41 f0       	breq	.+16     	; 0xd38 <Timer1_Init+0x1a>
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	99 f0       	breq	.+38     	; 0xd52 <Timer1_Init+0x34>
     d2c:	45 c0       	rjmp	.+138    	; 0xdb8 <Timer1_Init+0x9a>
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	51 f1       	breq	.+84     	; 0xd86 <Timer1_Init+0x68>
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	a9 f1       	breq	.+106    	; 0xda0 <Timer1_Init+0x82>
     d36:	40 c0       	rjmp	.+128    	; 0xdb8 <Timer1_Init+0x9a>
     d38:	8f b5       	in	r24, 0x2f	; 47
     d3a:	8e 7f       	andi	r24, 0xFE	; 254
     d3c:	8f bd       	out	0x2f, r24	; 47
     d3e:	8f b5       	in	r24, 0x2f	; 47
     d40:	8d 7f       	andi	r24, 0xFD	; 253
     d42:	8f bd       	out	0x2f, r24	; 47
     d44:	8e b5       	in	r24, 0x2e	; 46
     d46:	87 7f       	andi	r24, 0xF7	; 247
     d48:	8e bd       	out	0x2e, r24	; 46
     d4a:	8e b5       	in	r24, 0x2e	; 46
     d4c:	8f 7e       	andi	r24, 0xEF	; 239
     d4e:	8e bd       	out	0x2e, r24	; 46
     d50:	33 c0       	rjmp	.+102    	; 0xdb8 <Timer1_Init+0x9a>
     d52:	8f b5       	in	r24, 0x2f	; 47
     d54:	8e 7f       	andi	r24, 0xFE	; 254
     d56:	8f bd       	out	0x2f, r24	; 47
     d58:	8f b5       	in	r24, 0x2f	; 47
     d5a:	8d 7f       	andi	r24, 0xFD	; 253
     d5c:	8f bd       	out	0x2f, r24	; 47
     d5e:	8e b5       	in	r24, 0x2e	; 46
     d60:	88 60       	ori	r24, 0x08	; 8
     d62:	8e bd       	out	0x2e, r24	; 46
     d64:	8e b5       	in	r24, 0x2e	; 46
     d66:	80 61       	ori	r24, 0x10	; 16
     d68:	8e bd       	out	0x2e, r24	; 46
     d6a:	26 c0       	rjmp	.+76     	; 0xdb8 <Timer1_Init+0x9a>
     d6c:	8f b5       	in	r24, 0x2f	; 47
     d6e:	8e 7f       	andi	r24, 0xFE	; 254
     d70:	8f bd       	out	0x2f, r24	; 47
     d72:	8f b5       	in	r24, 0x2f	; 47
     d74:	8d 7f       	andi	r24, 0xFD	; 253
     d76:	8f bd       	out	0x2f, r24	; 47
     d78:	8e b5       	in	r24, 0x2e	; 46
     d7a:	88 60       	ori	r24, 0x08	; 8
     d7c:	8e bd       	out	0x2e, r24	; 46
     d7e:	8e b5       	in	r24, 0x2e	; 46
     d80:	8f 7e       	andi	r24, 0xEF	; 239
     d82:	8e bd       	out	0x2e, r24	; 46
     d84:	19 c0       	rjmp	.+50     	; 0xdb8 <Timer1_Init+0x9a>
     d86:	8f b5       	in	r24, 0x2f	; 47
     d88:	8e 7f       	andi	r24, 0xFE	; 254
     d8a:	8f bd       	out	0x2f, r24	; 47
     d8c:	8f b5       	in	r24, 0x2f	; 47
     d8e:	82 60       	ori	r24, 0x02	; 2
     d90:	8f bd       	out	0x2f, r24	; 47
     d92:	8e b5       	in	r24, 0x2e	; 46
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	8e bd       	out	0x2e, r24	; 46
     d98:	8e b5       	in	r24, 0x2e	; 46
     d9a:	80 61       	ori	r24, 0x10	; 16
     d9c:	8e bd       	out	0x2e, r24	; 46
     d9e:	0c c0       	rjmp	.+24     	; 0xdb8 <Timer1_Init+0x9a>
     da0:	8f b5       	in	r24, 0x2f	; 47
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	8f bd       	out	0x2f, r24	; 47
     da6:	8f b5       	in	r24, 0x2f	; 47
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	8f bd       	out	0x2f, r24	; 47
     dac:	8e b5       	in	r24, 0x2e	; 46
     dae:	88 60       	ori	r24, 0x08	; 8
     db0:	8e bd       	out	0x2e, r24	; 46
     db2:	8e b5       	in	r24, 0x2e	; 46
     db4:	80 61       	ori	r24, 0x10	; 16
     db6:	8e bd       	out	0x2e, r24	; 46
     db8:	41 30       	cpi	r20, 0x01	; 1
     dba:	69 f0       	breq	.+26     	; 0xdd6 <Timer1_Init+0xb8>
     dbc:	28 f0       	brcs	.+10     	; 0xdc8 <Timer1_Init+0xaa>
     dbe:	42 30       	cpi	r20, 0x02	; 2
     dc0:	89 f0       	breq	.+34     	; 0xde4 <Timer1_Init+0xc6>
     dc2:	43 30       	cpi	r20, 0x03	; 3
     dc4:	b1 f0       	breq	.+44     	; 0xdf2 <Timer1_Init+0xd4>
     dc6:	1b c0       	rjmp	.+54     	; 0xdfe <Timer1_Init+0xe0>
     dc8:	8f b5       	in	r24, 0x2f	; 47
     dca:	8f 7b       	andi	r24, 0xBF	; 191
     dcc:	8f bd       	out	0x2f, r24	; 47
     dce:	8f b5       	in	r24, 0x2f	; 47
     dd0:	8f 77       	andi	r24, 0x7F	; 127
     dd2:	8f bd       	out	0x2f, r24	; 47
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <Timer1_Init+0xe0>
     dd6:	8f b5       	in	r24, 0x2f	; 47
     dd8:	80 64       	ori	r24, 0x40	; 64
     dda:	8f bd       	out	0x2f, r24	; 47
     ddc:	8f b5       	in	r24, 0x2f	; 47
     dde:	8f 77       	andi	r24, 0x7F	; 127
     de0:	8f bd       	out	0x2f, r24	; 47
     de2:	0d c0       	rjmp	.+26     	; 0xdfe <Timer1_Init+0xe0>
     de4:	8f b5       	in	r24, 0x2f	; 47
     de6:	8f 7b       	andi	r24, 0xBF	; 191
     de8:	8f bd       	out	0x2f, r24	; 47
     dea:	8f b5       	in	r24, 0x2f	; 47
     dec:	80 68       	ori	r24, 0x80	; 128
     dee:	8f bd       	out	0x2f, r24	; 47
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <Timer1_Init+0xe0>
     df2:	8f b5       	in	r24, 0x2f	; 47
     df4:	80 64       	ori	r24, 0x40	; 64
     df6:	8f bd       	out	0x2f, r24	; 47
     df8:	8f b5       	in	r24, 0x2f	; 47
     dfa:	80 68       	ori	r24, 0x80	; 128
     dfc:	8f bd       	out	0x2f, r24	; 47
     dfe:	21 30       	cpi	r18, 0x01	; 1
     e00:	69 f0       	breq	.+26     	; 0xe1c <Timer1_Init+0xfe>
     e02:	28 f0       	brcs	.+10     	; 0xe0e <Timer1_Init+0xf0>
     e04:	22 30       	cpi	r18, 0x02	; 2
     e06:	89 f0       	breq	.+34     	; 0xe2a <Timer1_Init+0x10c>
     e08:	23 30       	cpi	r18, 0x03	; 3
     e0a:	b1 f0       	breq	.+44     	; 0xe38 <Timer1_Init+0x11a>
     e0c:	1b c0       	rjmp	.+54     	; 0xe44 <Timer1_Init+0x126>
     e0e:	8f b5       	in	r24, 0x2f	; 47
     e10:	8f 7e       	andi	r24, 0xEF	; 239
     e12:	8f bd       	out	0x2f, r24	; 47
     e14:	8f b5       	in	r24, 0x2f	; 47
     e16:	8f 7d       	andi	r24, 0xDF	; 223
     e18:	8f bd       	out	0x2f, r24	; 47
     e1a:	14 c0       	rjmp	.+40     	; 0xe44 <Timer1_Init+0x126>
     e1c:	8f b5       	in	r24, 0x2f	; 47
     e1e:	80 61       	ori	r24, 0x10	; 16
     e20:	8f bd       	out	0x2f, r24	; 47
     e22:	8f b5       	in	r24, 0x2f	; 47
     e24:	8f 7d       	andi	r24, 0xDF	; 223
     e26:	8f bd       	out	0x2f, r24	; 47
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <Timer1_Init+0x126>
     e2a:	8f b5       	in	r24, 0x2f	; 47
     e2c:	8f 7e       	andi	r24, 0xEF	; 239
     e2e:	8f bd       	out	0x2f, r24	; 47
     e30:	8f b5       	in	r24, 0x2f	; 47
     e32:	80 62       	ori	r24, 0x20	; 32
     e34:	8f bd       	out	0x2f, r24	; 47
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <Timer1_Init+0x126>
     e38:	8f b5       	in	r24, 0x2f	; 47
     e3a:	80 61       	ori	r24, 0x10	; 16
     e3c:	8f bd       	out	0x2f, r24	; 47
     e3e:	8f b5       	in	r24, 0x2f	; 47
     e40:	80 62       	ori	r24, 0x20	; 32
     e42:	8f bd       	out	0x2f, r24	; 47
     e44:	8e b5       	in	r24, 0x2e	; 46
     e46:	88 7f       	andi	r24, 0xF8	; 248
     e48:	8e bd       	out	0x2e, r24	; 46
     e4a:	8e b5       	in	r24, 0x2e	; 46
     e4c:	68 2b       	or	r22, r24
     e4e:	6e bd       	out	0x2e, r22	; 46
     e50:	08 95       	ret

00000e52 <Timer1_InputCaptureEdge>:
     e52:	81 11       	cpse	r24, r1
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <Timer1_InputCaptureEdge+0xc>
     e56:	8e b5       	in	r24, 0x2e	; 46
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	8e bd       	out	0x2e, r24	; 46
     e5c:	08 95       	ret
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	19 f4       	brne	.+6      	; 0xe68 <Timer1_InputCaptureEdge+0x16>
     e62:	8e b5       	in	r24, 0x2e	; 46
     e64:	8f 7b       	andi	r24, 0xBF	; 191
     e66:	8e bd       	out	0x2e, r24	; 46
     e68:	08 95       	ret

00000e6a <Timer1_ICU_InterruptEnable>:
     e6a:	89 b7       	in	r24, 0x39	; 57
     e6c:	80 62       	ori	r24, 0x20	; 32
     e6e:	89 bf       	out	0x39, r24	; 57
     e70:	08 95       	ret

00000e72 <Timer1_ICU_InterruptDisable>:
     e72:	89 b7       	in	r24, 0x39	; 57
     e74:	8f 7d       	andi	r24, 0xDF	; 223
     e76:	89 bf       	out	0x39, r24	; 57
     e78:	08 95       	ret

00000e7a <Timer1_ICU_SetCallBack>:
}
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_ICU_Fptr=LocalFptr;
     e7a:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <Timer1_ICU_Fptr+0x1>
     e7e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <Timer1_ICU_Fptr>
     e82:	08 95       	ret

00000e84 <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=NULLPTR)
     ea6:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <Timer1_OVF_Fptr>
     eaa:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <Timer1_OVF_Fptr+0x1>
     eae:	30 97       	sbiw	r30, 0x00	; 0
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
     eb2:	09 95       	icall
	}
}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=NULLPTR)
     ef8:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <Timer1_OCA_Fptr>
     efc:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <Timer1_OCA_Fptr+0x1>
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	09 f0       	breq	.+2      	; 0xf06 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
     f04:	09 95       	icall
	}
}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=NULLPTR)
     f4a:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <Timer1_OCB_Fptr>
     f4e:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <Timer1_OCB_Fptr+0x1>
     f52:	30 97       	sbiw	r30, 0x00	; 0
     f54:	09 f0       	breq	.+2      	; 0xf58 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
     f56:	09 95       	icall
	}
}
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_6>:
ISR(TIMER1_ICU_vect)
{
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULLPTR)
     f9c:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <Timer1_ICU_Fptr>
     fa0:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <Timer1_ICU_Fptr+0x1>
     fa4:	30 97       	sbiw	r30, 0x00	; 0
     fa6:	09 f0       	breq	.+2      	; 0xfaa <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
     fa8:	09 95       	icall
	}
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <OS_TaskState>:
#include "OS.h"

static OS_Stuct taskArray[MAX_NUM_OF_TASKS];
static u8 taskCounter = 0;

void OS_TaskState(fncPtr task , OS_state state){
     fcc:	dc 01       	movw	r26, r24
	for(u8 i=0; i<MAX_NUM_OF_TASKS ; i++){
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	1c c0       	rjmp	.+56     	; 0x100a <OS_TaskState+0x3e>
		if(taskArray[i].function == task){
     fd2:	29 2f       	mov	r18, r25
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	f9 01       	movw	r30, r18
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	e2 0f       	add	r30, r18
     fe2:	f3 1f       	adc	r31, r19
     fe4:	e3 54       	subi	r30, 0x43	; 67
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	40 81       	ld	r20, Z
     fea:	51 81       	ldd	r21, Z+1	; 0x01
     fec:	4a 17       	cp	r20, r26
     fee:	5b 07       	cpc	r21, r27
     ff0:	59 f4       	brne	.+22     	; 0x1008 <OS_TaskState+0x3c>
			taskArray[i].task_state = state;
     ff2:	f9 01       	movw	r30, r18
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	2e 0f       	add	r18, r30
     ffe:	3f 1f       	adc	r19, r31
    1000:	f9 01       	movw	r30, r18
    1002:	e3 54       	subi	r30, 0x43	; 67
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	63 83       	std	Z+3, r22	; 0x03

static OS_Stuct taskArray[MAX_NUM_OF_TASKS];
static u8 taskCounter = 0;

void OS_TaskState(fncPtr task , OS_state state){
	for(u8 i=0; i<MAX_NUM_OF_TASKS ; i++){
    1008:	9f 5f       	subi	r25, 0xFF	; 255
    100a:	97 30       	cpi	r25, 0x07	; 7
    100c:	10 f3       	brcs	.-60     	; 0xfd2 <OS_TaskState+0x6>
		if(taskArray[i].function == task){
			taskArray[i].task_state = state;
		}
	}	
}
    100e:	08 95       	ret

00001010 <OS_TaskCreate>:


OS_feedback OS_TaskCreate(fncPtr function, u8 periodicity, OS_state default_state)
{	
    1010:	9c 01       	movw	r18, r24
	
	OS_feedback errorState =OK;	
	
	if(taskCounter >=MAX_NUM_OF_TASKS)
    1012:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <taskCounter>
    1016:	97 30       	cpi	r25, 0x07	; 7
    1018:	e8 f4       	brcc	.+58     	; 0x1054 <OS_TaskCreate+0x44>
	{	
		errorState = NOK_COUNT_LIMIT;
	}
	else if( (periodicity>HYPER_PERIOD) || (periodicity==0) )
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	86 0f       	add	r24, r22
    101e:	86 34       	cpi	r24, 0x46	; 70
    1020:	d8 f4       	brcc	.+54     	; 0x1058 <OS_TaskCreate+0x48>
	{
		errorState=NOK_TIME_LIMIT;
	}
	else if(function ==NULLPTR)
    1022:	21 15       	cp	r18, r1
    1024:	31 05       	cpc	r19, r1
    1026:	d1 f0       	breq	.+52     	; 0x105c <OS_TaskCreate+0x4c>
		errorState = NOK_NULL_POINTER;
	}
	else
	{
			// Create task ->TCB
			taskArray[taskCounter].function = function;
    1028:	e9 2f       	mov	r30, r25
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	df 01       	movw	r26, r30
    102e:	aa 0f       	add	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	aa 0f       	add	r26, r26
    1034:	bb 1f       	adc	r27, r27
    1036:	ea 0f       	add	r30, r26
    1038:	fb 1f       	adc	r31, r27
    103a:	e3 54       	subi	r30, 0x43	; 67
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	31 83       	std	Z+1, r19	; 0x01
    1040:	20 83       	st	Z, r18
			taskArray[taskCounter].task_periodicity= periodicity;
    1042:	62 83       	std	Z+2, r22	; 0x02
			taskArray[taskCounter].task_state= default_state;
    1044:	43 83       	std	Z+3, r20	; 0x03
			taskArray[taskCounter].task_Counter = 1; // 1->default 					
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	84 83       	std	Z+4, r24	; 0x04
			taskCounter++;	
    104a:	9f 5f       	subi	r25, 0xFF	; 255
    104c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <taskCounter>


OS_feedback OS_TaskCreate(fncPtr function, u8 periodicity, OS_state default_state)
{	
	
	OS_feedback errorState =OK;	
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	08 95       	ret
	
	if(taskCounter >=MAX_NUM_OF_TASKS)
	{	
		errorState = NOK_COUNT_LIMIT;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	08 95       	ret
	}
	else if( (periodicity>HYPER_PERIOD) || (periodicity==0) )
	{
		errorState=NOK_TIME_LIMIT;
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	08 95       	ret
	}
	else if(function ==NULLPTR)
	{
		errorState = NOK_NULL_POINTER;
    105c:	83 e0       	ldi	r24, 0x03	; 3
			taskArray[taskCounter].task_Counter = 1; // 1->default 					
			taskCounter++;	
	}

			return errorState ;	
}
    105e:	08 95       	ret

00001060 <OS_Task_Handler>:

/* LInked to ISR --- Time --- Task States*/ 
void OS_Task_Handler(void)
{
	u8 task_id=0; //index
    1060:	20 e0       	ldi	r18, 0x00	; 0
		for( task_id ; task_id < taskCounter ; task_id++){
    1062:	36 c0       	rjmp	.+108    	; 0x10d0 <OS_Task_Handler+0x70>
			
				if(taskArray[task_id].task_Counter >= taskArray[task_id].task_periodicity  && taskArray[task_id].task_state != SUSPENDED){
    1064:	82 2f       	mov	r24, r18
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	fc 01       	movw	r30, r24
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	e8 0f       	add	r30, r24
    1074:	f9 1f       	adc	r31, r25
    1076:	e3 54       	subi	r30, 0x43	; 67
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	34 81       	ldd	r19, Z+4	; 0x04
    107c:	42 81       	ldd	r20, Z+2	; 0x02
    107e:	34 17       	cp	r19, r20
    1080:	d0 f0       	brcs	.+52     	; 0x10b6 <OS_Task_Handler+0x56>
    1082:	fc 01       	movw	r30, r24
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	e8 0f       	add	r30, r24
    108e:	f9 1f       	adc	r31, r25
    1090:	e3 54       	subi	r30, 0x43	; 67
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	43 81       	ldd	r20, Z+3	; 0x03
    1096:	42 30       	cpi	r20, 0x02	; 2
    1098:	71 f0       	breq	.+28     	; 0x10b6 <OS_Task_Handler+0x56>
					/*if(taskArray[task_id].task_state != SUSPENDED){}*/
					taskArray[task_id].task_state = READY; //change state To Ready
    109a:	fc 01       	movw	r30, r24
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	8e 0f       	add	r24, r30
    10a6:	9f 1f       	adc	r25, r31
    10a8:	fc 01       	movw	r30, r24
    10aa:	e3 54       	subi	r30, 0x43	; 67
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	83 83       	std	Z+3, r24	; 0x03
					taskArray[task_id].task_Counter = 1; // 1->default 
    10b2:	84 83       	std	Z+4, r24	; 0x04
    10b4:	0c c0       	rjmp	.+24     	; 0x10ce <OS_Task_Handler+0x6e>
				}
				else{
					taskArray[task_id].task_Counter++;
    10b6:	fc 01       	movw	r30, r24
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	8e 0f       	add	r24, r30
    10c2:	9f 1f       	adc	r25, r31
    10c4:	fc 01       	movw	r30, r24
    10c6:	e3 54       	subi	r30, 0x43	; 67
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	3f 5f       	subi	r19, 0xFF	; 255
    10cc:	34 83       	std	Z+4, r19	; 0x04

/* LInked to ISR --- Time --- Task States*/ 
void OS_Task_Handler(void)
{
	u8 task_id=0; //index
		for( task_id ; task_id < taskCounter ; task_id++){
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <taskCounter>
    10d4:	28 17       	cp	r18, r24
    10d6:	30 f2       	brcs	.-116    	; 0x1064 <OS_Task_Handler+0x4>
				}
				else{
					taskArray[task_id].task_Counter++;
				}
		}
}
    10d8:	08 95       	ret

000010da <OS_TaskExecution>:


void OS_TaskExecution(void)
{
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
	u8 task_id=0; //index
    10e0:	c0 e0       	ldi	r28, 0x00	; 0
	// check if (ready ->execute) And-->set state to Blocked
	
	for( task_id ; task_id < taskCounter ; task_id++){
    10e2:	16 c0       	rjmp	.+44     	; 0x1110 <OS_TaskExecution+0x36>
		
		if(taskArray[task_id].task_state == READY){
    10e4:	8c 2f       	mov	r24, r28
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	fc 01       	movw	r30, r24
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	e8 0f       	add	r30, r24
    10f4:	f9 1f       	adc	r31, r25
    10f6:	e3 54       	subi	r30, 0x43	; 67
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	23 81       	ldd	r18, Z+3	; 0x03
    10fc:	21 30       	cpi	r18, 0x01	; 1
    10fe:	39 f4       	brne	.+14     	; 0x110e <OS_TaskExecution+0x34>
			//Run_Fun
			taskArray[task_id].function();
    1100:	8f 01       	movw	r16, r30
    1102:	01 90       	ld	r0, Z+
    1104:	f0 81       	ld	r31, Z
    1106:	e0 2d       	mov	r30, r0
    1108:	09 95       	icall
			taskArray[task_id].task_state = BLOCKED ;
    110a:	f8 01       	movw	r30, r16
    110c:	13 82       	std	Z+3, r1	; 0x03
void OS_TaskExecution(void)
{
	u8 task_id=0; //index
	// check if (ready ->execute) And-->set state to Blocked
	
	for( task_id ; task_id < taskCounter ; task_id++){
    110e:	cf 5f       	subi	r28, 0xFF	; 255
    1110:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <taskCounter>
    1114:	c8 17       	cp	r28, r24
    1116:	30 f3       	brcs	.-52     	; 0x10e4 <OS_TaskExecution+0xa>
			taskArray[task_id].function();
			taskArray[task_id].task_state = BLOCKED ;
		}
		
	}
}
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <Task_SensorRunnable>:

volatile u8 Flag=0;

void Task_SensorRunnable(void){
	//periodic Runnable Sensor after 5sec
	DHT_SensorRunnable();
    1120:	0e 94 88 02 	call	0x510	; 0x510 <DHT_SensorRunnable>
    1124:	08 95       	ret

00001126 <Task_Periodic_Irrigation>:
}

void Task_Periodic_Irrigation(void){
	//periodic Irrigation after 60sec
	u8 HUM =((u16)DHT_Humiditygetter() /10 );
    1126:	0e 94 ae 02 	call	0x55c	; 0x55c <DHT_Humiditygetter>
    112a:	9c 01       	movw	r18, r24
    112c:	ad ec       	ldi	r26, 0xCD	; 205
    112e:	bc ec       	ldi	r27, 0xCC	; 204
    1130:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__umulhisi3>
    1134:	96 95       	lsr	r25
    1136:	87 95       	ror	r24
    1138:	96 95       	lsr	r25
    113a:	87 95       	ror	r24
    113c:	96 95       	lsr	r25
    113e:	87 95       	ror	r24
	if( HUM < Humidity_openPump){
    1140:	88 32       	cpi	r24, 0x28	; 40
    1142:	48 f4       	brcc	.+18     	; 0x1156 <Task_Periodic_Irrigation+0x30>
		OS_TaskState(Task_Pump_Control , BLOCKED);
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	8d ef       	ldi	r24, 0xFD	; 253
    1148:	98 e0       	ldi	r25, 0x08	; 8
    114a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OS_TaskState>
		Flag=1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <Flag>
    1154:	08 95       	ret
	}else{
		OS_TaskState(Task_Pump_Control , SUSPENDED);
    1156:	62 e0       	ldi	r22, 0x02	; 2
    1158:	8d ef       	ldi	r24, 0xFD	; 253
    115a:	98 e0       	ldi	r25, 0x08	; 8
    115c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OS_TaskState>
    1160:	08 95       	ret

00001162 <Task_Critical_Irrigation>:
	}
}

void Task_Critical_Irrigation(void){
	//periodic Irrigation after 15sec
	u16 HUM =( DHT_Humiditygetter() /10 );
    1162:	0e 94 ae 02 	call	0x55c	; 0x55c <DHT_Humiditygetter>
	if(HUM < Threshold_Humidity){
    1166:	88 3c       	cpi	r24, 0xC8	; 200
    1168:	91 05       	cpc	r25, r1
    116a:	48 f4       	brcc	.+18     	; 0x117e <Task_Critical_Irrigation+0x1c>
		OS_TaskState(Task_Pump_Control , BLOCKED);
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	8d ef       	ldi	r24, 0xFD	; 253
    1170:	98 e0       	ldi	r25, 0x08	; 8
    1172:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OS_TaskState>
		Flag=1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <Flag>
    117c:	08 95       	ret
	}else{
		OS_TaskState(Task_Pump_Control , SUSPENDED);
    117e:	62 e0       	ldi	r22, 0x02	; 2
    1180:	8d ef       	ldi	r24, 0xFD	; 253
    1182:	98 e0       	ldi	r25, 0x08	; 8
    1184:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OS_TaskState>
    1188:	08 95       	ret

0000118a <Task_ErrorHandle>:
	}
}

void Task_ErrorHandle(void){
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
	//periodic after 6sec	
	if(DHT_CRCSumgetter() == Check_Sum_Only()){
    118e:	0e 94 2c 03 	call	0x658	; 0x658 <DHT_CRCSumgetter>
    1192:	ec 01       	movw	r28, r24
    1194:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Check_Sum_Only>
    1198:	c8 17       	cp	r28, r24
    119a:	d9 07       	cpc	r29, r25
    119c:	41 f4       	brne	.+16     	; 0x11ae <Task_ErrorHandle+0x24>
		OS_TaskState(Task_Pump_Control , BLOCKED);
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	8d ef       	ldi	r24, 0xFD	; 253
    11a2:	98 e0       	ldi	r25, 0x08	; 8
    11a4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OS_TaskState>
		Error_Count=0;
    11a8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Error_Count>
    11ac:	0a c0       	rjmp	.+20     	; 0x11c2 <Task_ErrorHandle+0x38>
	}else{
		OS_TaskState(Task_Pump_Control , SUSPENDED);
    11ae:	62 e0       	ldi	r22, 0x02	; 2
    11b0:	8d ef       	ldi	r24, 0xFD	; 253
    11b2:	98 e0       	ldi	r25, 0x08	; 8
    11b4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OS_TaskState>
		Error_Count++;
    11b8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <Error_Count>
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <Error_Count>
	}
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <Start_Pump>:

void Start_Pump(void) {
	DIO_WritePin(PINA0,LOW);
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
	DIO_WritePin(PINA1,HIGH);
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
    11d8:	08 95       	ret

000011da <Stop_Pump>:
}

void Stop_Pump(void) {
	DIO_WritePin(PINA0,LOW);
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
	DIO_WritePin(PINA1,LOW);
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_WritePin>
	OS_TaskState(Task_Pump_Control , SUSPENDED);
    11ea:	62 e0       	ldi	r22, 0x02	; 2
    11ec:	8d ef       	ldi	r24, 0xFD	; 253
    11ee:	98 e0       	ldi	r25, 0x08	; 8
    11f0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OS_TaskState>
	Flag=0;
    11f4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Flag>
    11f8:	08 95       	ret

000011fa <Task_Pump_Control>:
}

void Task_Pump_Control(void){
	//periodic after 2sec (Should when create -> State Suspended)
	static u8 Time_Count=0;
	if(Flag){
    11fa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Flag>
    11fe:	88 23       	and	r24, r24
    1200:	39 f0       	breq	.+14     	; 0x1210 <Task_Pump_Control+0x16>
	Start_Pump();
    1202:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Start_Pump>
	Time_Count+=2;
    1206:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <Time_Count.2132>
    120a:	8e 5f       	subi	r24, 0xFE	; 254
    120c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <Time_Count.2132>
	}
	if(Time_Count > PUMP_ON_TIME ) //5 because i enter function after 2sec
    1210:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <Time_Count.2132>
    1214:	8b 30       	cpi	r24, 0x0B	; 11
    1216:	20 f0       	brcs	.+8      	; 0x1220 <Task_Pump_Control+0x26>
	{
		Stop_Pump();
    1218:	0e 94 ed 08 	call	0x11da	; 0x11da <Stop_Pump>
		Time_Count=0;	
    121c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <Time_Count.2132>
    1220:	08 95       	ret

00001222 <Task_DisplaySystem>:
	}
}


void Task_DisplaySystem(void){
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
	//periodic after 10sec
	LCD_GoTo(1,0);
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	0e 94 09 02 	call	0x412	; 0x412 <LCD_GoTo>
	LCD_WriteString((u8*)"      ");
    122e:	8c e8       	ldi	r24, 0x8C	; 140
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteString>
	LCD_GoTo(1,0);
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	0e 94 09 02 	call	0x412	; 0x412 <LCD_GoTo>
	LCD_WriteString((u8*)"H=");
    123e:	83 e9       	ldi	r24, 0x93	; 147
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteString>
	LCD_WriteNumber(DHT_Humiditygetter());
    1246:	0e 94 ae 02 	call	0x55c	; 0x55c <DHT_Humiditygetter>
    124a:	28 2f       	mov	r18, r24
    124c:	39 2f       	mov	r19, r25
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_WriteNumber>
	
	if(Error_Count >= 2){
    125e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <Error_Count>
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	50 f0       	brcs	.+20     	; 0x127a <Task_DisplaySystem+0x58>
		Error_Count=0;
    1266:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Error_Count>
		LCD_GoTo(1,0);
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	0e 94 09 02 	call	0x412	; 0x412 <LCD_GoTo>
		LCD_WriteString((u8*)"Error");
    1272:	86 e9       	ldi	r24, 0x96	; 150
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WriteString>
	}
}
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	08 95       	ret

00001280 <Task_1S_LcdUpdate>:


void Task_1S_LcdUpdate(void)
{
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
	static u16 u16Seconds = 1;
	LCD_GoTo(0,10);
    1284:	6a e0       	ldi	r22, 0x0A	; 10
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	0e 94 09 02 	call	0x412	; 0x412 <LCD_GoTo>
	LCD_WriteNumber(u16Seconds);
    128c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1290:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1294:	28 2f       	mov	r18, r24
    1296:	39 2f       	mov	r19, r25
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_WriteNumber>
	u16Seconds++;
    12a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    12ac:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    12b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <__fixunssfsi>:
    12c0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_splitA>
    12c4:	88 f0       	brcs	.+34     	; 0x12e8 <__fixunssfsi+0x28>
    12c6:	9f 57       	subi	r25, 0x7F	; 127
    12c8:	98 f0       	brcs	.+38     	; 0x12f0 <__fixunssfsi+0x30>
    12ca:	b9 2f       	mov	r27, r25
    12cc:	99 27       	eor	r25, r25
    12ce:	b7 51       	subi	r27, 0x17	; 23
    12d0:	b0 f0       	brcs	.+44     	; 0x12fe <__fixunssfsi+0x3e>
    12d2:	e1 f0       	breq	.+56     	; 0x130c <__fixunssfsi+0x4c>
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	1a f0       	brmi	.+6      	; 0x12e4 <__fixunssfsi+0x24>
    12de:	ba 95       	dec	r27
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__fixunssfsi+0x14>
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <__fixunssfsi+0x4c>
    12e4:	b1 30       	cpi	r27, 0x01	; 1
    12e6:	91 f0       	breq	.+36     	; 0x130c <__fixunssfsi+0x4c>
    12e8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_zero>
    12ec:	b1 e0       	ldi	r27, 0x01	; 1
    12ee:	08 95       	ret
    12f0:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_zero>
    12f4:	67 2f       	mov	r22, r23
    12f6:	78 2f       	mov	r23, r24
    12f8:	88 27       	eor	r24, r24
    12fa:	b8 5f       	subi	r27, 0xF8	; 248
    12fc:	39 f0       	breq	.+14     	; 0x130c <__fixunssfsi+0x4c>
    12fe:	b9 3f       	cpi	r27, 0xF9	; 249
    1300:	cc f3       	brlt	.-14     	; 0x12f4 <__fixunssfsi+0x34>
    1302:	86 95       	lsr	r24
    1304:	77 95       	ror	r23
    1306:	67 95       	ror	r22
    1308:	b3 95       	inc	r27
    130a:	d9 f7       	brne	.-10     	; 0x1302 <__fixunssfsi+0x42>
    130c:	3e f4       	brtc	.+14     	; 0x131c <__fixunssfsi+0x5c>
    130e:	90 95       	com	r25
    1310:	80 95       	com	r24
    1312:	70 95       	com	r23
    1314:	61 95       	neg	r22
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	8f 4f       	sbci	r24, 0xFF	; 255
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	08 95       	ret

0000131e <__floatunsisf>:
    131e:	e8 94       	clt
    1320:	09 c0       	rjmp	.+18     	; 0x1334 <__floatsisf+0x12>

00001322 <__floatsisf>:
    1322:	97 fb       	bst	r25, 7
    1324:	3e f4       	brtc	.+14     	; 0x1334 <__floatsisf+0x12>
    1326:	90 95       	com	r25
    1328:	80 95       	com	r24
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	99 23       	and	r25, r25
    1336:	a9 f0       	breq	.+42     	; 0x1362 <__floatsisf+0x40>
    1338:	f9 2f       	mov	r31, r25
    133a:	96 e9       	ldi	r25, 0x96	; 150
    133c:	bb 27       	eor	r27, r27
    133e:	93 95       	inc	r25
    1340:	f6 95       	lsr	r31
    1342:	87 95       	ror	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b7 95       	ror	r27
    134a:	f1 11       	cpse	r31, r1
    134c:	f8 cf       	rjmp	.-16     	; 0x133e <__floatsisf+0x1c>
    134e:	fa f4       	brpl	.+62     	; 0x138e <__floatsisf+0x6c>
    1350:	bb 0f       	add	r27, r27
    1352:	11 f4       	brne	.+4      	; 0x1358 <__floatsisf+0x36>
    1354:	60 ff       	sbrs	r22, 0
    1356:	1b c0       	rjmp	.+54     	; 0x138e <__floatsisf+0x6c>
    1358:	6f 5f       	subi	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	16 c0       	rjmp	.+44     	; 0x138e <__floatsisf+0x6c>
    1362:	88 23       	and	r24, r24
    1364:	11 f0       	breq	.+4      	; 0x136a <__floatsisf+0x48>
    1366:	96 e9       	ldi	r25, 0x96	; 150
    1368:	11 c0       	rjmp	.+34     	; 0x138c <__floatsisf+0x6a>
    136a:	77 23       	and	r23, r23
    136c:	21 f0       	breq	.+8      	; 0x1376 <__floatsisf+0x54>
    136e:	9e e8       	ldi	r25, 0x8E	; 142
    1370:	87 2f       	mov	r24, r23
    1372:	76 2f       	mov	r23, r22
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <__floatsisf+0x5e>
    1376:	66 23       	and	r22, r22
    1378:	71 f0       	breq	.+28     	; 0x1396 <__floatsisf+0x74>
    137a:	96 e8       	ldi	r25, 0x86	; 134
    137c:	86 2f       	mov	r24, r22
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	2a f0       	brmi	.+10     	; 0x138e <__floatsisf+0x6c>
    1384:	9a 95       	dec	r25
    1386:	66 0f       	add	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	88 1f       	adc	r24, r24
    138c:	da f7       	brpl	.-10     	; 0x1384 <__floatsisf+0x62>
    138e:	88 0f       	add	r24, r24
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	97 f9       	bld	r25, 7
    1396:	08 95       	ret

00001398 <__fp_split3>:
    1398:	57 fd       	sbrc	r21, 7
    139a:	90 58       	subi	r25, 0x80	; 128
    139c:	44 0f       	add	r20, r20
    139e:	55 1f       	adc	r21, r21
    13a0:	59 f0       	breq	.+22     	; 0x13b8 <__fp_splitA+0x10>
    13a2:	5f 3f       	cpi	r21, 0xFF	; 255
    13a4:	71 f0       	breq	.+28     	; 0x13c2 <__fp_splitA+0x1a>
    13a6:	47 95       	ror	r20

000013a8 <__fp_splitA>:
    13a8:	88 0f       	add	r24, r24
    13aa:	97 fb       	bst	r25, 7
    13ac:	99 1f       	adc	r25, r25
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <__fp_splitA+0x20>
    13b0:	9f 3f       	cpi	r25, 0xFF	; 255
    13b2:	79 f0       	breq	.+30     	; 0x13d2 <__fp_splitA+0x2a>
    13b4:	87 95       	ror	r24
    13b6:	08 95       	ret
    13b8:	12 16       	cp	r1, r18
    13ba:	13 06       	cpc	r1, r19
    13bc:	14 06       	cpc	r1, r20
    13be:	55 1f       	adc	r21, r21
    13c0:	f2 cf       	rjmp	.-28     	; 0x13a6 <__fp_split3+0xe>
    13c2:	46 95       	lsr	r20
    13c4:	f1 df       	rcall	.-30     	; 0x13a8 <__fp_splitA>
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <__fp_splitA+0x30>
    13c8:	16 16       	cp	r1, r22
    13ca:	17 06       	cpc	r1, r23
    13cc:	18 06       	cpc	r1, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	f1 cf       	rjmp	.-30     	; 0x13b4 <__fp_splitA+0xc>
    13d2:	86 95       	lsr	r24
    13d4:	71 05       	cpc	r23, r1
    13d6:	61 05       	cpc	r22, r1
    13d8:	08 94       	sec
    13da:	08 95       	ret

000013dc <__fp_zero>:
    13dc:	e8 94       	clt

000013de <__fp_szero>:
    13de:	bb 27       	eor	r27, r27
    13e0:	66 27       	eor	r22, r22
    13e2:	77 27       	eor	r23, r23
    13e4:	cb 01       	movw	r24, r22
    13e6:	97 f9       	bld	r25, 7
    13e8:	08 95       	ret

000013ea <__mulsf3>:
    13ea:	0e 94 08 0a 	call	0x1410	; 0x1410 <__mulsf3x>
    13ee:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__fp_round>
    13f2:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__fp_pscA>
    13f6:	38 f0       	brcs	.+14     	; 0x1406 <__mulsf3+0x1c>
    13f8:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fp_pscB>
    13fc:	20 f0       	brcs	.+8      	; 0x1406 <__mulsf3+0x1c>
    13fe:	95 23       	and	r25, r21
    1400:	11 f0       	breq	.+4      	; 0x1406 <__mulsf3+0x1c>
    1402:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__fp_inf>
    1406:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_nan>
    140a:	11 24       	eor	r1, r1
    140c:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_szero>

00001410 <__mulsf3x>:
    1410:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_split3>
    1414:	70 f3       	brcs	.-36     	; 0x13f2 <__mulsf3+0x8>

00001416 <__mulsf3_pse>:
    1416:	95 9f       	mul	r25, r21
    1418:	c1 f3       	breq	.-16     	; 0x140a <__mulsf3+0x20>
    141a:	95 0f       	add	r25, r21
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	55 1f       	adc	r21, r21
    1420:	62 9f       	mul	r22, r18
    1422:	f0 01       	movw	r30, r0
    1424:	72 9f       	mul	r23, r18
    1426:	bb 27       	eor	r27, r27
    1428:	f0 0d       	add	r31, r0
    142a:	b1 1d       	adc	r27, r1
    142c:	63 9f       	mul	r22, r19
    142e:	aa 27       	eor	r26, r26
    1430:	f0 0d       	add	r31, r0
    1432:	b1 1d       	adc	r27, r1
    1434:	aa 1f       	adc	r26, r26
    1436:	64 9f       	mul	r22, r20
    1438:	66 27       	eor	r22, r22
    143a:	b0 0d       	add	r27, r0
    143c:	a1 1d       	adc	r26, r1
    143e:	66 1f       	adc	r22, r22
    1440:	82 9f       	mul	r24, r18
    1442:	22 27       	eor	r18, r18
    1444:	b0 0d       	add	r27, r0
    1446:	a1 1d       	adc	r26, r1
    1448:	62 1f       	adc	r22, r18
    144a:	73 9f       	mul	r23, r19
    144c:	b0 0d       	add	r27, r0
    144e:	a1 1d       	adc	r26, r1
    1450:	62 1f       	adc	r22, r18
    1452:	83 9f       	mul	r24, r19
    1454:	a0 0d       	add	r26, r0
    1456:	61 1d       	adc	r22, r1
    1458:	22 1f       	adc	r18, r18
    145a:	74 9f       	mul	r23, r20
    145c:	33 27       	eor	r19, r19
    145e:	a0 0d       	add	r26, r0
    1460:	61 1d       	adc	r22, r1
    1462:	23 1f       	adc	r18, r19
    1464:	84 9f       	mul	r24, r20
    1466:	60 0d       	add	r22, r0
    1468:	21 1d       	adc	r18, r1
    146a:	82 2f       	mov	r24, r18
    146c:	76 2f       	mov	r23, r22
    146e:	6a 2f       	mov	r22, r26
    1470:	11 24       	eor	r1, r1
    1472:	9f 57       	subi	r25, 0x7F	; 127
    1474:	50 40       	sbci	r21, 0x00	; 0
    1476:	9a f0       	brmi	.+38     	; 0x149e <__mulsf3_pse+0x88>
    1478:	f1 f0       	breq	.+60     	; 0x14b6 <__mulsf3_pse+0xa0>
    147a:	88 23       	and	r24, r24
    147c:	4a f0       	brmi	.+18     	; 0x1490 <__mulsf3_pse+0x7a>
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	bb 1f       	adc	r27, r27
    1484:	66 1f       	adc	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	50 40       	sbci	r21, 0x00	; 0
    148e:	a9 f7       	brne	.-22     	; 0x147a <__mulsf3_pse+0x64>
    1490:	9e 3f       	cpi	r25, 0xFE	; 254
    1492:	51 05       	cpc	r21, r1
    1494:	80 f0       	brcs	.+32     	; 0x14b6 <__mulsf3_pse+0xa0>
    1496:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__fp_inf>
    149a:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_szero>
    149e:	5f 3f       	cpi	r21, 0xFF	; 255
    14a0:	e4 f3       	brlt	.-8      	; 0x149a <__mulsf3_pse+0x84>
    14a2:	98 3e       	cpi	r25, 0xE8	; 232
    14a4:	d4 f3       	brlt	.-12     	; 0x149a <__mulsf3_pse+0x84>
    14a6:	86 95       	lsr	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	b7 95       	ror	r27
    14ae:	f7 95       	ror	r31
    14b0:	e7 95       	ror	r30
    14b2:	9f 5f       	subi	r25, 0xFF	; 255
    14b4:	c1 f7       	brne	.-16     	; 0x14a6 <__mulsf3_pse+0x90>
    14b6:	fe 2b       	or	r31, r30
    14b8:	88 0f       	add	r24, r24
    14ba:	91 1d       	adc	r25, r1
    14bc:	96 95       	lsr	r25
    14be:	87 95       	ror	r24
    14c0:	97 f9       	bld	r25, 7
    14c2:	08 95       	ret

000014c4 <__fp_inf>:
    14c4:	97 f9       	bld	r25, 7
    14c6:	9f 67       	ori	r25, 0x7F	; 127
    14c8:	80 e8       	ldi	r24, 0x80	; 128
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	08 95       	ret

000014d0 <__fp_nan>:
    14d0:	9f ef       	ldi	r25, 0xFF	; 255
    14d2:	80 ec       	ldi	r24, 0xC0	; 192
    14d4:	08 95       	ret

000014d6 <__fp_pscA>:
    14d6:	00 24       	eor	r0, r0
    14d8:	0a 94       	dec	r0
    14da:	16 16       	cp	r1, r22
    14dc:	17 06       	cpc	r1, r23
    14de:	18 06       	cpc	r1, r24
    14e0:	09 06       	cpc	r0, r25
    14e2:	08 95       	ret

000014e4 <__fp_pscB>:
    14e4:	00 24       	eor	r0, r0
    14e6:	0a 94       	dec	r0
    14e8:	12 16       	cp	r1, r18
    14ea:	13 06       	cpc	r1, r19
    14ec:	14 06       	cpc	r1, r20
    14ee:	05 06       	cpc	r0, r21
    14f0:	08 95       	ret

000014f2 <__fp_round>:
    14f2:	09 2e       	mov	r0, r25
    14f4:	03 94       	inc	r0
    14f6:	00 0c       	add	r0, r0
    14f8:	11 f4       	brne	.+4      	; 0x14fe <__fp_round+0xc>
    14fa:	88 23       	and	r24, r24
    14fc:	52 f0       	brmi	.+20     	; 0x1512 <__fp_round+0x20>
    14fe:	bb 0f       	add	r27, r27
    1500:	40 f4       	brcc	.+16     	; 0x1512 <__fp_round+0x20>
    1502:	bf 2b       	or	r27, r31
    1504:	11 f4       	brne	.+4      	; 0x150a <__fp_round+0x18>
    1506:	60 ff       	sbrs	r22, 0
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <__fp_round+0x20>
    150a:	6f 5f       	subi	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	8f 4f       	sbci	r24, 0xFF	; 255
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	08 95       	ret

00001514 <__umulhisi3>:
    1514:	a2 9f       	mul	r26, r18
    1516:	b0 01       	movw	r22, r0
    1518:	b3 9f       	mul	r27, r19
    151a:	c0 01       	movw	r24, r0
    151c:	a3 9f       	mul	r26, r19
    151e:	70 0d       	add	r23, r0
    1520:	81 1d       	adc	r24, r1
    1522:	11 24       	eor	r1, r1
    1524:	91 1d       	adc	r25, r1
    1526:	b2 9f       	mul	r27, r18
    1528:	70 0d       	add	r23, r0
    152a:	81 1d       	adc	r24, r1
    152c:	11 24       	eor	r1, r1
    152e:	91 1d       	adc	r25, r1
    1530:	08 95       	ret

00001532 <__moddi3>:
    1532:	68 94       	set
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <__divdi3_moddi3>

00001536 <__divdi3>:
    1536:	e8 94       	clt

00001538 <__divdi3_moddi3>:
    1538:	f9 2f       	mov	r31, r25
    153a:	f1 2b       	or	r31, r17
    153c:	12 f0       	brmi	.+4      	; 0x1542 <__divdi3_moddi3+0xa>
    153e:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__udivdi3_umoddi3>
    1542:	a0 e0       	ldi	r26, 0x00	; 0
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 ea       	ldi	r30, 0xA7	; 167
    1548:	fa e0       	ldi	r31, 0x0A	; 10
    154a:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__prologue_saves__+0xc>
    154e:	09 2e       	mov	r0, r25
    1550:	05 94       	asr	r0
    1552:	22 f4       	brpl	.+8      	; 0x155c <__divdi3_moddi3+0x24>
    1554:	0e 94 29 0b 	call	0x1652	; 0x1652 <__negdi2>
    1558:	11 23       	and	r17, r17
    155a:	92 f4       	brpl	.+36     	; 0x1580 <__divdi3_moddi3+0x48>
    155c:	f0 e8       	ldi	r31, 0x80	; 128
    155e:	0f 26       	eor	r0, r31
    1560:	ff ef       	ldi	r31, 0xFF	; 255
    1562:	e0 94       	com	r14
    1564:	f0 94       	com	r15
    1566:	00 95       	com	r16
    1568:	10 95       	com	r17
    156a:	b0 94       	com	r11
    156c:	c0 94       	com	r12
    156e:	d0 94       	com	r13
    1570:	a1 94       	neg	r10
    1572:	bf 0a       	sbc	r11, r31
    1574:	cf 0a       	sbc	r12, r31
    1576:	df 0a       	sbc	r13, r31
    1578:	ef 0a       	sbc	r14, r31
    157a:	ff 0a       	sbc	r15, r31
    157c:	0f 0b       	sbc	r16, r31
    157e:	1f 0b       	sbc	r17, r31
    1580:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__udivmod64>
    1584:	07 fc       	sbrc	r0, 7
    1586:	0e 94 29 0b 	call	0x1652	; 0x1652 <__negdi2>
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	ec e0       	ldi	r30, 0x0C	; 12
    1590:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__epilogue_restores__+0xc>

00001594 <__umoddi3>:
    1594:	68 94       	set
    1596:	01 c0       	rjmp	.+2      	; 0x159a <__udivdi3_umoddi3>

00001598 <__udivdi3>:
    1598:	e8 94       	clt

0000159a <__udivdi3_umoddi3>:
    159a:	8f 92       	push	r8
    159c:	9f 92       	push	r9
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__udivmod64>
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	9f 90       	pop	r9
    15ac:	8f 90       	pop	r8
    15ae:	08 95       	ret

000015b0 <__udivmod64>:
    15b0:	88 24       	eor	r8, r8
    15b2:	99 24       	eor	r9, r9
    15b4:	f4 01       	movw	r30, r8
    15b6:	e4 01       	movw	r28, r8
    15b8:	b0 e4       	ldi	r27, 0x40	; 64
    15ba:	9f 93       	push	r25
    15bc:	aa 27       	eor	r26, r26
    15be:	9a 15       	cp	r25, r10
    15c0:	8b 04       	cpc	r8, r11
    15c2:	9c 04       	cpc	r9, r12
    15c4:	ed 05       	cpc	r30, r13
    15c6:	fe 05       	cpc	r31, r14
    15c8:	cf 05       	cpc	r28, r15
    15ca:	d0 07       	cpc	r29, r16
    15cc:	a1 07       	cpc	r26, r17
    15ce:	98 f4       	brcc	.+38     	; 0x15f6 <__udivmod64+0x46>
    15d0:	ad 2f       	mov	r26, r29
    15d2:	dc 2f       	mov	r29, r28
    15d4:	cf 2f       	mov	r28, r31
    15d6:	fe 2f       	mov	r31, r30
    15d8:	e9 2d       	mov	r30, r9
    15da:	98 2c       	mov	r9, r8
    15dc:	89 2e       	mov	r8, r25
    15de:	98 2f       	mov	r25, r24
    15e0:	87 2f       	mov	r24, r23
    15e2:	76 2f       	mov	r23, r22
    15e4:	65 2f       	mov	r22, r21
    15e6:	54 2f       	mov	r21, r20
    15e8:	43 2f       	mov	r20, r19
    15ea:	32 2f       	mov	r19, r18
    15ec:	22 27       	eor	r18, r18
    15ee:	b8 50       	subi	r27, 0x08	; 8
    15f0:	31 f7       	brne	.-52     	; 0x15be <__udivmod64+0xe>
    15f2:	bf 91       	pop	r27
    15f4:	27 c0       	rjmp	.+78     	; 0x1644 <__udivmod64+0x94>
    15f6:	1b 2e       	mov	r1, r27
    15f8:	bf 91       	pop	r27
    15fa:	bb 27       	eor	r27, r27
    15fc:	22 0f       	add	r18, r18
    15fe:	33 1f       	adc	r19, r19
    1600:	44 1f       	adc	r20, r20
    1602:	55 1f       	adc	r21, r21
    1604:	66 1f       	adc	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	88 1c       	adc	r8, r8
    160e:	99 1c       	adc	r9, r9
    1610:	ee 1f       	adc	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	cc 1f       	adc	r28, r28
    1616:	dd 1f       	adc	r29, r29
    1618:	aa 1f       	adc	r26, r26
    161a:	bb 1f       	adc	r27, r27
    161c:	8a 14       	cp	r8, r10
    161e:	9b 04       	cpc	r9, r11
    1620:	ec 05       	cpc	r30, r12
    1622:	fd 05       	cpc	r31, r13
    1624:	ce 05       	cpc	r28, r14
    1626:	df 05       	cpc	r29, r15
    1628:	a0 07       	cpc	r26, r16
    162a:	b1 07       	cpc	r27, r17
    162c:	48 f0       	brcs	.+18     	; 0x1640 <__udivmod64+0x90>
    162e:	8a 18       	sub	r8, r10
    1630:	9b 08       	sbc	r9, r11
    1632:	ec 09       	sbc	r30, r12
    1634:	fd 09       	sbc	r31, r13
    1636:	ce 09       	sbc	r28, r14
    1638:	df 09       	sbc	r29, r15
    163a:	a0 0b       	sbc	r26, r16
    163c:	b1 0b       	sbc	r27, r17
    163e:	21 60       	ori	r18, 0x01	; 1
    1640:	1a 94       	dec	r1
    1642:	e1 f6       	brne	.-72     	; 0x15fc <__udivmod64+0x4c>
    1644:	2e f4       	brtc	.+10     	; 0x1650 <__udivmod64+0xa0>
    1646:	94 01       	movw	r18, r8
    1648:	af 01       	movw	r20, r30
    164a:	be 01       	movw	r22, r28
    164c:	cd 01       	movw	r24, r26
    164e:	00 0c       	add	r0, r0
    1650:	08 95       	ret

00001652 <__negdi2>:
    1652:	60 95       	com	r22
    1654:	70 95       	com	r23
    1656:	80 95       	com	r24
    1658:	90 95       	com	r25
    165a:	30 95       	com	r19
    165c:	40 95       	com	r20
    165e:	50 95       	com	r21
    1660:	21 95       	neg	r18
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	4f 4f       	sbci	r20, 0xFF	; 255
    1666:	5f 4f       	sbci	r21, 0xFF	; 255
    1668:	6f 4f       	sbci	r22, 0xFF	; 255
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	8f 4f       	sbci	r24, 0xFF	; 255
    166e:	9f 4f       	sbci	r25, 0xFF	; 255
    1670:	08 95       	ret

00001672 <__prologue_saves__>:
    1672:	2f 92       	push	r2
    1674:	3f 92       	push	r3
    1676:	4f 92       	push	r4
    1678:	5f 92       	push	r5
    167a:	6f 92       	push	r6
    167c:	7f 92       	push	r7
    167e:	8f 92       	push	r8
    1680:	9f 92       	push	r9
    1682:	af 92       	push	r10
    1684:	bf 92       	push	r11
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	ca 1b       	sub	r28, r26
    169c:	db 0b       	sbc	r29, r27
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	09 94       	ijmp

000016aa <__epilogue_restores__>:
    16aa:	2a 88       	ldd	r2, Y+18	; 0x12
    16ac:	39 88       	ldd	r3, Y+17	; 0x11
    16ae:	48 88       	ldd	r4, Y+16	; 0x10
    16b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    16b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    16b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    16b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    16b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    16bc:	b9 84       	ldd	r11, Y+9	; 0x09
    16be:	c8 84       	ldd	r12, Y+8	; 0x08
    16c0:	df 80       	ldd	r13, Y+7	; 0x07
    16c2:	ee 80       	ldd	r14, Y+6	; 0x06
    16c4:	fd 80       	ldd	r15, Y+5	; 0x05
    16c6:	0c 81       	ldd	r16, Y+4	; 0x04
    16c8:	1b 81       	ldd	r17, Y+3	; 0x03
    16ca:	aa 81       	ldd	r26, Y+2	; 0x02
    16cc:	b9 81       	ldd	r27, Y+1	; 0x01
    16ce:	ce 0f       	add	r28, r30
    16d0:	d1 1d       	adc	r29, r1
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	ed 01       	movw	r28, r26
    16de:	08 95       	ret

000016e0 <__cmpdi2_s8>:
    16e0:	00 24       	eor	r0, r0
    16e2:	a7 fd       	sbrc	r26, 7
    16e4:	00 94       	com	r0
    16e6:	2a 17       	cp	r18, r26
    16e8:	30 05       	cpc	r19, r0
    16ea:	40 05       	cpc	r20, r0
    16ec:	50 05       	cpc	r21, r0
    16ee:	60 05       	cpc	r22, r0
    16f0:	70 05       	cpc	r23, r0
    16f2:	80 05       	cpc	r24, r0
    16f4:	90 05       	cpc	r25, r0
    16f6:	08 95       	ret

000016f8 <_exit>:
    16f8:	f8 94       	cli

000016fa <__stop_program>:
    16fa:	ff cf       	rjmp	.-2      	; 0x16fa <__stop_program>
